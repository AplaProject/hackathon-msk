{
    "pages": [
        {
            "Name": "metric_page",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Div(Class: content-wrapper){\n SetTitle(\"Метрика\")\n    Div(Class: row df f-valign){\n        Div(Class: col-md-12){\n  \n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body:\"Регистрация\")\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                            Div(Class: col-md-4 mt-sm text-left){\n                                Label(For: referendum_name){\n                                    Span(Body: \"Фио\")\n                                }\n                            }\n                        Div(Class: col-md-8 mc-sm text-left){\n                            DBFind(Name: possession, Source: src)\n                            Input(Name: referendum_name, Class: form-control, Type: text, Value: \"\")\n                        }\n                    }                   \n                }\n\n\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                   Div(Class: col-md-4 mt-sm text-left){\n                                Label(For: referendum_name){\n                                    Span(Body: \"Паспортные данные\")\n                                }\n                   }\n                   Div(Class: col-md-8 mc-sm text-left){\n                       Input(Name: referendum_name, Class: form-control, Type: text, Value: \"\")\n                   }\n                        }                   \n                    }\n\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                   Div(Class: col-md-4 mt-sm text-left){\n                                Label(For: referendum_name){\n                                    Span(Body: \"Электронная подпись\")\n                                }\n                   }\n                   Div(Class: col-md-8 mc-sm text-left){\n                       Input(Name: referendum_name, Class: form-control, Type: text, Value: \"\")\n                   }\n                        }                   \n                    }\n\n                    \n\n                }\n            }\n  }\n  Div(Class: col-md-3)\n    }\n}"
        },
        {
            "Name": "my_contracts_page",
            "Conditions": "true",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n                Div(h3 text-center){\"Рассмотрение предложения о покупки патента #5\"}\n                Div(panel panel-primary){\n                    Div(panel-body){\n                        Div(table-responsive){\n                            DBFind(Name: possession, Source: src_poss).Where(\"patent_id=14\").Custom(patent_title) {\n                                DBFind(Name: patents, Source: src_pat).WhereId(14).Vars(var)\n                                Span(#var_title#)\n                            }.Custom(status) {\n                               Label(\"На рассмотрении\")\n                            }.Custom(price) {\n                                DBFind(Name: pricelists, Source: src_prc).Where(\"patent_id=14\").Vars(varp)\n                                Span(#varp_exclusive_price#)\n                            }.Custom(approved){\n                                Div(pull-right){\n                                    Button(Body: \"Отклонить\", Contract: ApproveContract, Class:btn btn-danger, Params: \"PatentId=14,Action=1\")\n                                }\n                                Div(pull-right){\n                                    Button(Body: \"Одобрить\", Contract: ApproveContract, Class:btn btn-success, Params: \"PatentId=14,Action=0\")\n                                }\n                            }\n                            Table(Source: src_poss, Columns: \"Название патента=patent_title,Цена=price,Статус=status,=approved\")\n\n                        }\n                    }\n                }\n        }\n    }\n}"
        },
        {
            "Name": "agreement_page",
            "Conditions": "true",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n                Div(h3 text-center){\"Мои договоры\"}\n                Div(panel panel-primary){\n                    Div(panel-body){\n                        Div(table-responsive){\n                            DBFind(Name: possession, Source: src_poss)\n                            Table(Source: src_poss)\n                        }\n                    }\n                }\n        }\n    }\n}"
        },
        {
            "Name": "patent_condition_page",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h3 text-center){LangRes(\"Условия приобретения\")}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Label(#PatentId#)\n                    Div(col-sm-12){\n                        Div(row){\n                            DBFind(pricelists, mysrc).Where(\"actor_id=#ActorId#\").Where(\"patent_id=#PatentId#\").Vars(cond)\n                            Div(input-group col-sm-12){\n                                Label(\"Стоимость одного дня использования\")\n                                Input(Name: DayPrice, Type: text, Value: #cond_day_price#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                Label(\"Покупка прав на бессрочное использование\")\n                                Input(Name: UltimatePrice, Type: text, Value: #cond_exclusive_price#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                Label(\"Комментарий\")\n                                Input(Name: Comment, Type: text, Value: #cond_comments#, Disabled: true)\n                            }\n                        }\n                    }\n                }\n            }\n            Div(panel panel-primary col-sm-5){\n             Div(h3 text-center){LangRes(\"Приобрести для временного использования\")}\n                Form(panel-body){\n                    Div(col-sm-12){\n                        Div(row){\n                            DBFind(pricelists, mysrc).Where(\"actor_id=#ActorId# and patent_id=#PatentId#\").Vars(cond)\n                            Div(input-group col-sm-12){\n                                Label(\"Количество дней\")\n                                Input(Name: DayCount, Type: text, Placeholder: \"Введите количество дней\")\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                Label(\"Дополнительная информация\")\n                                Input(Name: DayComment, Type: text, Placeholder: \"Введите дополнительную информацию\")\n                            }\n                        }\n                    }'\n                }\n                Div(Class: panel-footer clearfix){\n                    Div(text-center ){\n                            Button(Body: \"Отправить запрос\", Contract: SendConditionRequest, Class:btn btn-primary, Page: search_page, Params: \"PatentId=#PatentId#, ActorId=#ActorId#, ConditionType=0, Comment=Какой-то комментарий, DayCount=30\")\n                    }\n                }\n            }\n            Div(col-sm-2){\n            }\n            Div(panel panel-primary col-sm-5){\n             Div(h3 text-center){LangRes(\"Приобрести на постоянной основе\")}\n                Form(panel-body){\n                    Div(col-sm-12){\n                        Div(row){\n                            DBFind(pricelists, mysrc).Where(\"actor_id=#ActorId# and patent_id=#PatentId#\").Vars(cond)\n                            Div(input-group col-sm-12){\n                                Label(\"Стоимость полной покупки\")\n                                Input(Name: UltimatePrice, Type: text, Value: #cond_exclusive_price#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                Label(\"Дополнительная информация\")\n                                Input(Name: UltimateComment, Type: text, Placeholder: \"Введите дополнительную информацию\")\n                            }\n                        }\n                    }'\n                }\n                Div(Class: panel-footer clearfix){\n                    Div(text-center ){\n                            Button(Body: \"Отправить запрос\", Contract: SendConditionRequest, Class:btn btn-primary, Page: search_page, Params: \"PatentId=#PatentId#, ActorId=#ActorId#, ConditionType=1, Comment=Какой-то комментарий, DayCount=0\")\n                    }\n                }\n            }\n        }  \n    }\n}"
        },
        {
            "Name": "patent_page",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h3 text-center){LangRes(\"Правообладатели\")}\n            Div(panel panel-primary){\n                Div(panel-body){\n                        Div(table-responsive){\n                            DBFind(Name: possession, Source: src).Where(\"patent_id=#PatentId#\").Custom(member) {\n                                Div() {  \n                                    DBFind(Name: members, Source: actor).WhereId(#actor_id#).Vars(member)\n                                    Span(#member_member_name#)\n                                }\n                            }.Custom(usage) {\n                                SetVar(usage_type_var, Для производства)\n                                Div() {\n                                    Span(#usage_type_var#)\n                                }\n                            }.Custom(territory) {\n                                SetVar(territory_var, Вся Россия)\n                                Div() {\n                                    Span(#territory_var#)\n                                }\n                            }.Custom(territory) {\n                                SetVar(territory_var, Вся Россия)\n                                Div() {\n                                    Span(#territory_var#)\n                                }\n                            }.Custom(message) {\n                                Div(pull-right){\n                                    Button(Body: \"Узнать условия\", Class:btn btn-warning, Page: patent_condition_page, PageParams: \"PatentId=#PatentId#,ActorId=#actor_id#\")\n                                }\n                            }.Vars(possess)\n                            \n                            Table(Source: src, Columns: \"Идентификатор=actor_id, Имя=member, Дата окончания=stop_date, Тип использования=usage, Территория владения=territory,=message\")\n                        }\n                    }\n            }\n            Div(h3 text-center){LangRes(\"Информация о патенте\")}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Div(col-sm-12){\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Идентификатор патента\")\n                                Input(Name: PatId, Type: text, Value: #patent_id#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Название\")\n                                Input(Name: PatTitle, Type: text, Value: #patent_title#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Регистрационный номер\")\n                                Input(Name: PatRegistrationNumber, Type: text, Value: 124151235125, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Авторы\")\n                                Input(Name: PatAuthors, Type: text, Value: #patent_authors#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Тип патента\")\n                                Input(Name: PatType, Type: text, Value:  \"Патент на музыкальное произведение\", Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Ключевые слова\")\n                                Input(Name: PatType, Type: text, Value: #patent_key_words#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Патентная формула\")\n                                Input(Name: PatType, Type: text, Value: #patent_formula#, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Дата заявки\")\n                                Input(Name: PatType, Type: text, Value: 12.05.2017, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Дата регистрации\")\n                                Input(Name: PatType, Type: text, Value: 25.02.2018, Disabled: true)\n                            }\n                        }\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                DBFind(patents, mysrc).WhereId(#PatentId#).Vars(patent)\n                                Label(\"Дополнительная информация\")\n                                Input(Name: PatType, Type: text, Value: #patent_add_info#, Disabled: true)\n                            }\n                        }\n                    }\n                }\n            }\n    }\n}"
        },
        {
            "Name": "patent_info_page",
            "Conditions": "ContractConditions(\"MainConditions\")",
            "Menu": "default_menu",
            "Value": "Div()"
        },
        {
            "Name": "search_page",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-10 col-lg-offset-1){\n            Div(h3 text-center){LangRes(\"Поиск патентов\")}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Div(col-sm-12){\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                Label(\"Название патента\")\n                                Input(Name: PatentName, Placeholder: \"Введите название патента\", Type: text, Class: form-control)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Ключевые слов\")\n                                Input(Name: KeyWords, Placeholder: \"Введите список ключевых слов\", Type: text, Class: form-control)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Уникальный идентификатор ID\")\n                                Input(Name: SomeID, Placeholder: \"Введите уникальный id\", Type: text, Class: form-control)\n                            }\n                        }\n                        \n                    }\n                    Div(Class: panel-footer clearfix){\n                    Div(text-center){   \n                        Button(Body: \"Найти\", Class:btn btn-primary, Page: search_page, PageParams: \"PatentName=Val(PatentName),KeyWords=Val(KeyWords),identificator=Val(SomeID)\")\n                    }\n                }\n                } \n            }\n            Div(h3 text-center){LangRes(\"Результаты поиска\")}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Div(table-responsive){\n                        DBFind(Name: patents, Source: src).WhereId(#identificator#).Custom(info){\n                            Div(pull-right){\n                                Button(Body: \"Инфо\", Class:btn btn-primary, Page: patent_page, PageParams: \"PatentId=#identificator#\")\n                            }\n                        }\n                        Table(Source: src, Columns: \"Идентификатор=id,Название=title,Ключевые слова=key_words,Авторы=authors,=info,)\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "price_page",
            "Conditions": "true",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-6 col-lg-offset-2){\n            Div(h4 text-center){LangRes(\"Форма установки цены на передачу прав на патент\")}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Div(col-sm-12){\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                Label(\"Цена передачи прав на бессрочный период\")\n                                Input(Name: UltimatePrice, Placeholder: \"Введите сумму\", Type: text, Class: form-control, Value: 0)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Цена передачи прав за день использования\")\n                                Input(Name: DayPrice, Placeholder: \"Введите сумму\", Type: text, Class: form-control, Value: 0)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Дополнительная информация\")\n                                Input(Name: Comment, Placeholder: \"Допольнительная информация\", Type: text, Class: form-control)\n                            }\n                        }\n                        Div(text-center){\n                            Button(Body: \"Отправить на рассмотрение\", Contract: SavePrice, Class:btn btn-primary, Page: patents_page, Params: \"UltimatePrice=Val(UltimatePrice),DayPrice=Val(DayPrice),Comment=Val(Comment),PatentId=#PatentId#\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "patents_page",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n                Div(h3 text-center){\"Список ваших патентов\"}\n                Div(panel panel-primary){\n                    Div(panel-body){\n                        Div(table-responsive){\n                            DBFind(Name: possession, Source: src_poss).Where(\"actor_id=#key_id#\").Custom(patent_title) {\n                                DBFind(Name: patents, Source: src_pat).Where(\"id=#patent_id#\").Vars(var)\n                                Span(#var_title#)\n                            }.Custom(patent_authors) {\n                                Span(#var_authors#)\n                            }.Custom(patent_key_words) {\n                                Span(#var_key_words#)\n                            }.Custom(patent_formula) {\n                                Span(#var_formula#)\n                            }.Custom(patent_add_info) {\n                                Span(#var_add_info#)\n                            }.Custom(patent_status) {\n                                Span(#var_status#)\n                            }\n                            Table(Source: src_poss, Columns: \"ID=id,Название=patent_title,Авторы=patent_authors,Ключевые слова=patent_key_words,Патентная формула=patent_formula,Информация=patent_add_info,status=patent_status\")\n                        }\n                    }\n                }\n        }\n    }\n}"
        },
        {
            "Name": "my_patents_page",
            "Conditions": "ContractConditions(\"@1EditPage\")",
            "Menu": "Applications",
            "Value": "SetTitle(\"Мои патенты\")\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            DBFind(Name: src, Source: patents).Vars(exist)\n            If(#exist_id#>0){\n                Div(h3){\"Список патентов\"}\n                Div(panel panel-primary){\n                    Div(panel-body){\n                        Div(table-responsive){\n                            DBFind(Name: src, Source: patents)\n                            Table(Source: patents)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "send_comment_page",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h4){\"Ввод комментария\"}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Div(row){\n                        Div(col-sm-10){\n                            Input(Name: CommentText, Type:text, Placeholder:Введите комментарий)\n                        }\n                        Div(col-sm-2){  \n                            Div(input-group-btn){\n                                Button(Body: \"Отправить\", Contract: SendComment, Class:btn btn-primary)\n                            }\n                        }\n                    }\n                }\n            }\n            DBFind(Name:comment, Source: table_exist).Where(\"is_approved=1\").Vars(exist)\n            If(#exist_id#>0){\n                Div(h4){\"Одобренные комментарии\"}\n                Div(panel panel-primary){\n                    Div(panel-body){\n                        Div(table-responsive){\n                            DBFind(Name:comment, Source: table).Where(\"is_approved=1\")\n                            Table(Source: table, Columns:\"автор=author,текст=text\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "approve_comment_page",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "default_menu",
            "Value": "SetTitle(\"Новые комментарии\")\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            DBFind(Name:comment, Source: table_exist).Where(\"is_approved=0\").Vars(exist)\n            If(#exist_id#>0){\n                Div(h4){\"Одобрение комментариев\"}\n                Div(panel panel-primary){\n                    Div(panel-body){\n                        Div(table-responsive){\n                            DBFind(Name:comment, Source: table).Where(\"is_approved=0\").Custom(approved){\n                                Div(pull-right){\n                                    Button(Body: \"Одобрить\", Contract: ApproveComment, Class:btn btn-success, Page: approve_comment_page, Params: \"CommentID=#id#\")\n                                }\n                            }\n                            Table(Source: table, Columns:\"Автор=author,Текст=text,=approved\")\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "create_patent_page",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Div(content-wrapper){\n    Div(row){\n        Div(col-lg-6 col-lg-offset-3){\n            Div(h3 text-center){LangRes(\"Форма подачи заявки о регистрации патента\")}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Div(col-sm-12){\n                        Div(row){\n                            Div(input-group col-sm-12 text-center){\n                                DBFind(members, mysrc).WhereId(#key_id#).Vars(member)\n                                Label(\"Ваше имя\")\n                                Input(Name: User, Placeholder: \"Имя пользователя\", Type: text, Value: #member_member_name#, Disabled: true)\n                            }\n                        }.Style(margin: auto; width: 50%;)\n                        Div(row){\n                            Div(input-group col-sm-12){\n                                Label(\"Название патента\")\n                                Input(Name: PatentName, Placeholder: \"Введите название патента\", Type: text, Class: form-control)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Регистрационный номер\")\n                                Input(Name: RegistrationNumber, Placeholder: \"Введите регистрационный номер\", Type: text)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Список авторов\")\n                                Input(Name: Authors, Placeholder: \"Введите список авторов\", Type: text, Class: form-control)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Список ключевых слов\")\n                                Input(Name: KeyWords, Placeholder: \"Введите список ключевых слов\", Type: text, Class: form-control)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Тип патента\")\n                                EcosysParam(Name: type_patent, Source: src_type)\n                                Select(Name: PatentType, Source: src_type, ValueColumn: id, NameColumn: name, Class: form-control, Value: \"Тип1\")\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Патентная формула\")\n                                Input(Name: PatentFormul, Placeholder: \"Патентная формула\", Type: text, Class: form-control)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Дата подачи заявки\")\n                                Input(Name: RequestDate, Placeholder: \"Введите дату\", Type: date, Class: form-control)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Дата регистрации патента\")\n                                Input(Name: ApproveDate, Placeholder: \"Введите дату\", Type: date, Class: form-control)\n                            }\n                            Div(input-group col-sm-12){\n                                Label(\"Дополнительная информация (комментарии, ссылки и т.д.)\")\n                                Input(Name: Comment, Placeholder: \"Допольнительная информация\", Type: text, Class: form-control)\n                            }\n                        }\n                        \n                    }\n                        Div(input-group col-sm-12 panel-footer){\n                        Div(text-center){\n                            Button(Body: \"Отправить на рассмотрение\", Contract: SendPatentRequest, Class:btn btn-primary, Page: notifications)\n                        }\n                    }\n                }\n\n            }\n        }\n    }\n}"
        },
        {
            "Name": "referendums_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications",
            "Value": "Div(Class: content-wrapper){\n    If(#referendum_id# > 0){\n\n        DBFind(Name: referendums, Source: src_referendums).Where(\"id=#referendum_id#\").Vars(instance)\n        DBFind(Name: referendums_participants, Source: src_referendums_participants).Where(\"referendum_id=#referendum_id# and member_id=#key_id#\").Vars(participant)\n\n        SetTitle($referendum$: #instance_name#)\n        Div(Class: breadcrumb){\n            LinkPage($referendum$, referendums_list)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(Class: text-muted, Body: #instance_name#)\n        }\n\n        Div(Class: row df f-valign){\n            Div(Class: col-md-2)\n            Div(Class: col-md-8){\n\n                Div(Class: panel panel-default){\n                    Form(){ \n\n                        Div(Class: list-group-item text-center){\n                            P(Class: h2 text-bold m0, Body: #instance_name#)\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-12 mt-sm){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-muted m0, Body: LangRes(total_votes): #instance_votes_total#)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n                        }\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm)\n                                Div(Class: col-md-8 mt-sm){\n\t\t\t\t\t\t\t\t\tP(Class: h4 text-normal m0, Body: #instance_question#)\n\t\t\t\t\t\t\t\t}\n                                Div(Class: col-md-2 mt-sm)\n\t\t\t\t\t\t\t}\n                        }\n                        Div(Class: list-group-item text-center){\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm )\n                                Div(Class: col-md-4 mt-sm text-left){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-success m0, Body: LangRes(votes_taken_accept))\n                                }\n                                Div(Class: col-md-4 mt-sm text-right){\n\t\t\t\t\t\t\t\t\tP(Class: h5 text-danger m0, Body: LangRes(votes_taken_reject))\n                                }\n                                Div(Class: col-md-2 mt-sm)\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm )\n                                Div(Class: col-md-8 mt-sm text-center){\n                                    If(Or(#instance_percent_accept#>0,#instance_percent_reject#>0)){\n                                        Div().Style(background-color:green;height:10px;display:inline-block;width:#instance_percent_accept#%)\n                                        Div().Style(background-color:red;height:10px;display:inline-block;width:#instance_percent_reject#%)\n                                    }.Else{\n                                        Div().Style(background-color:LightGray;height:10px;display:inline-block;width:100%)\n                                    }\n                                }\n                                Div(Class: col-md-2 mt-sm)\n                            }\n                            Div(Class: row df f-valign){\n                                Div(Class: col-md-2 mt-sm )\n                                Div(Class: col-md-4 mt-sm text-left){\n                                    P(Class: h5 text-success m0, Body: #instance_percent_accept# % (#instance_votes_accept#))\n                                }\n                                Div(Class: col-md-4 mt-sm text-right){\n                                    P(Class: h5 text-danger m0, Body: #instance_percent_reject# % (#instance_votes_reject#))\n                                }\n                                Div(Class: col-md-2 mt-sm)\n                            }\n\t\t\t\t\t\t}\n                        If(#participant_id# > 0){\n                        }.Else{\n                            Div(Class: list-group-item text-center){\n                                Div(Class: row df f-valign){\n                                    Div(Class: col-md-1 mt-sm )\n                                    Div(Class: col-md-5 mt-sm text-center){\n                                        Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success, Contract: referendums_accept, Params: \"referendum_id=#referendum_id#\", Page: referendums_view, PageParams: \"referendum_id=#referendum_id#\")\n                                    }\n                                    Div(Class: col-md-5 mt-sm text-center){\n                                        Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger, Contract: referendums_reject, Params: \"referendum_id=#referendum_id#\", Page: referendums_view, PageParams: \"referendum_id=#referendum_id#\")\n                                    }\n                                    Div(Class: col-md-1 mt-sm)\n                                }\n                            }\n                        }\n\n                    }\n                }\n\n            }\n            Div(Class: col-md-2)\n        }   \n    }.Else{\n        Div(Class: md-12 alert alert-danger text-center){\n            Span(Body: LangRes(attention))\n        }\n    }\n}"
        },
        {
            "Name": "referendums_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications",
            "Value": "Div(Class: content-wrapper){\n    \n    SetTitle($referendum$)\n    \n    If(GetVar(isSearch) == 1){\n        SetVar(Name: v_Where, Value: \"name='#v_Search#' and delete = 0\")\n    }.Else{\n        SetVar(Name: v_Where, Value: \"delete=0\")\n        SetVar(Name: v_Search, Value: \"\")\n    }\n    \n    DBFind(Name: referendums, Source: src_referendums).Custom(custom_id){\n\t\tSpan(#id#)\n    }.Custom(custom_name){\n        LinkPage(Page: referendums_view, PageParams: \"referendum_id=#id#\"){\n            Span(Class: h4 text-bold, Body: #name#)\n        }\n    }.Custom(custom_all){\n        Span(Class: h5, Body: #votes_total#)\n    }.Custom(custom_accept){\n        Span(Class: h5 text-success, Body: #votes_accept# ( #percent_accept# %))\n    }.Custom(custom_reject){\n        Span(Class: h5 text-danger, Body: #votes_reject# ( #percent_reject# %))\n    }.Custom(custom_voting){\n        SetVar(Name: participant_id, Value: 0)\n        DBFind(Name: referendums_participants, Source: src_referendums_participants).Where(\"referendum_id=#id# and member_id=#key_id#\").Vars(participant)\n        If(#participant_id# > 0){\n        }.Else{\n            Div(Class: pull-right){\n                Button(Body: Em(Class: fa fa-thumbs-down), Class: btn btn-danger, Contract: referendums_reject, Params: \"referendum_id=#id#\", Page: referendums_list)\n            }\n            Div(Class: pull-right){\n                Button(Body: Em(Class: fa fa-thumbs-up), Class: btn btn-success, Contract: referendums_accept, Params: \"referendum_id=#id#\", Page: referendums_list)\n            }\n        }\n    }.Custom(custom_question){\n        Span(Class: h6, Body: #question#)\n    }.Where(#v_Where#).Order(id)\n    \n    Div(Class: panel panel-primary){\n        Form(){\n            Div(Class: list-group-item){\n                Div(Class: row df f-valign){\n                    Div(Class: col-md-1 mt-sm text-right){\n                        Label(For: Search){\n                            Span(Body: LangRes(name))\n                        }\n                    }\n                    Div(Class: col-md-11 mc-sm){\n                        Div(Class: input-group){\n                            Input(Class: form-control, Type: text, Name: Search, Value: #v_Search#)\n                            Div(Class: input-group-btn){\n                                Button(Body: Em(Class: fa fa-search), Class: btn btn-default, Page: referendums_list, PageParams: \"isSearch=1,v_Search=Val(Search)\")\n                            }\n                        }\n                    }\n                }\n            }\n            \n            Div(Class: list-group-item){\n                Table(src_referendums, \"$id$=custom_id,$name$=custom_name,$description$=custom_question,$votes_taken_accept$=custom_accept,$votes_taken_reject$=custom_reject,$total_votes$=custom_all,=custom_voting\")\n                If(GetVar(isSearch) == 1){\n                    Div(Class: text-center){\n                        Button(Body: $view_all$, Class: btn btn-primary, Page: referendums_list, PageParams: \"isSearch=0\")\n                    }\n                }\n            }\n            \n            Div(Class: panel-footer clearfix){\n                Div(Class: pull-right){\n                    Button(Body: LangRes(create), Class: btn btn-primary, Page: referendums_add)\n                }\n            }\n            \n        }\n    }\n}"
        },
        {
            "Name": "referendums_add",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($referendum$)\n\tDiv(Class: breadcrumb){\n\t\tLinkPage($referendum$, referendums_list)\n\t\tSpan(/).Style(margin-right: 10px; margin-left: 10px;)\n\t\tSpan(Class: text-muted, Body: $new_voting$)\n\t}\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\t\t\n            Div(Class: panel panel-primary){\n                Div(Class: panel-heading, Body: LangRes(new_voting))\n                Form(){\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-sm text-right){\n                                Label(For: referendum_name){\n                                    Span(Body: LangRes(name))\n                                }\n                \t\t\t}\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                \t\t\t    Input(Name: referendum_name, Class: form-control, Type: text)\n                \t\t\t}\n                        }                   \n                    }\n\n                    Div(Class: list-group-item){\n                        Div(Class: row df f-valign){\n                \t\t\tDiv(Class: col-md-3 mt-lg text-right){\n                                Label(For: question){\n                                    Span(Body: LangRes(description))\n                                }\n                            }\n                \t\t\tDiv(Class: col-md-9 mc-sm text-left){\n                \t\t\t    Input(Name: question, Class: form-control, Type: textarea)\n                \t\t\t}\n                        }                      \n                    }\n\n                    Div(Class: panel-footer clearfix){\n                        Div(Class: pull-right){\n                            Button(Body: LangRes(back), Class: btn btn-default, Page: referendums_list)\n                            Button(Body: LangRes(create), Class: btn btn-primary, Page: referendums_list, Contract: referendums_add)\n                        }\n                    }\n\n                }\n            }\n\t\t}\n\t\tDiv(Class: col-md-3)\n    }\n}"
        },
        {
            "Name": "profile_view",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($user_info$)\n\tDiv(Class: breadcrumb){\n\t\tSpan(Class: text-muted, Body: LangRes(user_info))\n\t}\n\n    If(Or(#v_member_id#>0,#v_member_id#<0)){\n    }.Else{\n\t\tSetVar(Name: v_member_id, Value: #key_id#)\n    }\n\tDBFind(Name: members, Source: src_member).Where(id=#v_member_id#).Vars(prefix)\n\t\n\tIf(Or(#prefix_id#>0,#prefix_id#<0)){\n    }.Else{\n        SetVar(Name: prefix_member_name, Value: \"\")\n    }\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n            Div(Class: panel panel-default){\n                Form(){ \n\t\t\t\t\tDiv(Class: list-group-item text-center){\n\t\t\t\t\t\tSpan(Class: h3, Body: LangRes(user_info))\t\n\t\t\t\t\t}\n\t\t\t\t\tDiv(Class: list-group-item){\n\t\t\t\t\t\tDiv(Class: row df f-valign){\n\t\t\t\t\t\t\tDiv(Class: col-md-12 mt-sm text-center){\n\t\t\t\t\t\t\t\tIf(Or(#prefix_id#>0,#prefix_id#<0)){\n                                    Div(Body: Span(Class: h3 text-bold, Body: #prefix_member_name#))\n\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\tButton(Class: btn btn-link, Page: profile_edit){\n\t\t\t\t\t\t\t\t\t\tSpan(Class: h3 text-bold, Body: LangRes(editing_profile))\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n                }\n            }\n\n        }\n        Div(Class: col-md-3)\n    }\n}"
        },
        {
            "Name": "profile_edit",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "SetTitle($profile_edit$)\nDiv(content-wrapper){\n    \n    If(Or(#v_id#>0,#v_id#<0)){\n        DBFind(Name: members, Source: src_member).Where(id=#v_id#).Vars(prefix)\n    }.Else{\n        DBFind(Name: members, Source: src_member).Where(id=#key_id#).Vars(prefix)\n    }\n    \n    Div(row){\n        Div(col-md-8 col-md-offset-2 col-lg-6 col-lg-offset-3){\n            Div(panel panel-primary){\n                Div(panel-heading, Body: LangRes(profile_edit))\n                Form(){\n                    Div(list-group-item){\n                        Div(row){\n                            Div(col-md-3 mt-sm text-right){\n                                Label(For: username){\n                                    Span(Body: LangRes(username))\n                                }\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                Input(Class: form-control, Type: text, Name: Username, Value: #prefix_member_name#)\n                            }\n                        }\n                    }\n                    \n                    Div(panel-footer clearfix){\n                        Div(pull-right){\n                            Input(Type: hidden, Value: 0, Name: Kid)\n                            Button(Body: LangRes(save), Class: btn btn-primary, Contract: Profile_Edit, Page: profile_view).Alert(Text: $want_save$, ConfirmButton: $yes$, CancelButton: $no$, Icon: question)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "land_registry_view",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Applications",
            "Value": "If(GetVar(notific_val_int)){\n    SetVar(LandId, #notific_val_int#)\n}.Else{}\n\nIf(GetVar(notific_id)){}.Else{SetVar(notific_id,0)}\n\nSetVar(title,$land_record$)\n\nIf(#LandId#>0){}.Else{SetVar(LandId, 1)}\n\nIf(GetVar(LandId)){\n    DBFind(Name: land_registry, Source: src_entry).WhereId(#LandId#).Vars(entry)\n    DBFind(Name: land_registry_ownership, Source: src_land_ownership).Where(lend_object_id=#LandId#).Vars(ownership)\n    \n    DBFind(Name: members, Source: src_owner).Where(id=#ownership_owner_id#).Vars(owner)\n}\nSetTitle(#title#)\n\nDiv(content-wrapper){\n    Div(breadcrumb){\n        Div(){\n            LinkPage(Body:$land_records$,Page: land_registry_records)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(#title#, text-muted)\n        }\n    }\n    If(GetVar(LandId)){\n        Div(row df f-valign){\n            Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3 mt-sm text-left){\n                Div(panel panel-default){\n                    Form(){\n                        Div(Class: list-group-item text-center){\n                            Span(Class: h3, Body: $land_record$ #GetVar(LandId))\t\n                        }\n                        Div(list-group-item){\n                            Map(MapType: hybrid, Hmap:300, Value: #entry_map_coords#)\n                        }\n                        Div(list-group-item){\n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){\n                                    Strong($owner$:)\n                                }\n                                Div(col-md-6 mt-sm text-left h5){\n                                    Div(){\n                                        Span(#owner_member_name#)\n                                    }\n                                }\n                            }\n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){\n                                    Strong($area_size$)\n                                    (Span(m).(2).Style(vertical-align: super;font-size:small;)):\n                                }\n                                Div(col-md-7 mt-sm text-left h5){#entry_area#}\n                            }\n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){\n                                    Strong($address$:)\n                                }\n                                Div(col-md-7 mt-sm text-left h5){#entry_address#}\n                            }\n                            \n                            Div(row df f-valign){\n                                Div(col-md-5 mt-sm text-right h5){Strong($record_add_date$:)}\n                                Div(col-md-7 mt-sm text-left h5){DateTime(#entry_date_create#)}\n                            }\n                            \n                            Div(row df){\n                                Div(col-md-5 mt-sm text-right h5){Strong($buildings_use_class$:)}\n                                Div(col-md-7 mt-sm text-left h5){\n                                    EcosysParam(Name: buildings_use_class, Index: #entry_buildings_use_class#)\n                                }\n                            }\n                            \n                            Div(row df){\n                                Div(col-md-5 mt-sm text-right h5){Strong($land_nature$:)}\n                                Div(col-md-7 mt-sm text-left h5){\n                                    EcosysParam(Name: land_nature, Index: #entry_land_nature#)\n                                }\n                            }\n                        }\n\t\t\t\t\t\tDiv(list-group-item){\n                            DBFind(Name: notifications, Source: src_alert).Where(page_params='LandId=#LandId#,second_request=1' and closed=0).Vars(alert)\n                            Div(row df){\n                                Div(col-md-5 mt-lg text-right h5){Strong($legal_status$:)}\n                                Div(col-md-3 mt-lg text-left h5){\n                                    If(GetVar(alert_id)){\n                                        SetVar(alert, 1)\n                                    }.Else{\n                                        SetVar(alert, 0)\n                                    }\n                                    Span(EcosysParam(Name: legal_status, Index: #entry_legal_status#)).Style(margin-right:10px;)\n                                }\n                                Div(col-md-4 mc-sm text-right h5){\n                                    If(And(#entry_legal_status#!=1, #alert#==0)){\n                                        Button(Contract: land_registry_SecondRequest, Body:$send_request$, Params: \"LandId=#LandId#\", Class: btn btn-default, Page: land_registry_view, PageParams: \"LandId=#LandId#\").Alert(Text:$ask_request_second$, ConfirmButton:$confirm$, CancelButton:$cancel$)\n                                    }\n                                }\n                            }\n                        }\n\t\t\t\t\t\tDiv(list-group-item){\n                            Div(row df){\n                                Div(col-md-5 mt-lg text-right h5){Strong($encumbrance_certificate$:)}\n                                Div(col-md-3 mt-lg text-left h5){\n                                    Span(EcosysParam(Name: land_ec_status, Index: #entry_encumbrance_certificate#)).Style(padding-right:10px;)\n                                }\n                                Div(col-md-4 mc-sm text-right h5){\n                                    If(And(#entry_encumbrance_certificate#!=1, #alert#==0)){\n                                        Button(Contract: land_registry_SecondRequest, Body:$send_request$, Params: \"LandId=#LandId#\", Class: btn btn-default, Page: land_registry_view, PageParams: \"LandId=#LandId#\").Alert(Text:$ask_request_second$, ConfirmButton:$confirm$, CancelButton:$cancel$)\n                                    }\n                                }\n                            }\n                        }\n\t\t\t\t\t\tDiv(list-group-item){\n                            Div(row df f-valign){\n                                Div(col-md-5 mt-lg text-right h5){Strong($consideration_value$:)}\n                                Div(col-md-3 mt-lg text-left h5){\n                                    If(#entry_price#>0){\n                                        Span(#entry_price# INR).Style(padding-right:10px;)\n                                    }.Else{\n                                        $undefined$\n                                    }\n                                }\n                                Div(col-md-4 mc-sm text-right h5){\n                                    If(#ownership_owner_id#==#key_id#){\n                                        Button(Page: land_registry_edit, Body:$change$, PageParams: \"LandId=#LandId#\", Class: btn btn-default)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "land_registry_records",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Applications",
            "Value": "SetTitle($land_records$)\nSetVar(this, land_registry_records)\nInclude(land_registry_records)"
        },
        {
            "Name": "land_registry_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Applications",
            "Value": "Include(land_registry_edit)"
        },
        {
            "Name": "land_registry_add",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Menu": "Applications",
            "Value": "Div(content-wrapper){\n    Div(breadcrumb){\n        Div(){\n            LinkPage(LangRes(land_records), land_registry_records)\n            Span(/).Style(margin-right: 10px; margin-left: 10px;)\n            Span(LangRes(land_records_add), text-muted)\n        }\n    }\n    SetTitle($department_of_land_resources$)\n    \n    Div(row df f-valign){\n        Div(col-sm-8 col-sm-offset-2 text-left){\n            Div(panel panel-primary){\n                Div(panel-heading, Body: LangRes(add_new_record))\n                Form(){\n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-3 mt-sm text-right){\n                                Strong(LangRes(address))\n                            }\n                            Div(col-md-9 mc-sm text-center){\n                                InputMap(Name: Coords,Type: polygon, MapType: hybrid, Value: `{\"zoom\":8, \"center\":{\"lat\":51.500,\"lng\":-0.125}}`)\n                            }\n                        }\n                    }\n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-3 mt-sm text-right){\n                                Strong(LangRes(owner))\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                DBFind(Name: members, Source: src_owners)\n                                Select(Name: OwnerId, Source: src_owners, ValueColumn: id, NameColumn: member_name, Class: form-control m-b)\n                            }\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-3 mt-sm text-right){\n                                Strong(LangRes(land_nature))\n                            }\n                            Div(col-md-9 mb-sm text-left){\n                                EcosysParam(Name: land_nature, Source: src_nature)\n                                Select(Name: LandNature, Source: src_nature, Class: form-control, ValueColumn: id, NameColumn: name)\n                            }\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-3 mt-sm text-right){\n                                Strong(LangRes(buildings_use_class))\n                            }\n                            Div(col-md-9 mc-sm text-left){\n                                EcosysParam(Name: land_buildings_use_class, Source: use_class)\n                                Select(Name: BuildingsUseClass, Source: use_class, Class: form-control, ValueColumn: id, NameColumn: name)\n                            }\n                        }\n                    }\n                    Div(panel-footer){\n                        Div(clearfix){\n                            Div(pull-right){\n                                Div(btn-group){\n                                    Input(Name: RegistrationDate, Type: hidden, Value: Now(datetime))\n                                    Button(Page: land_registry_records, Body: LangRes(back), Class: btn btn-default btn-pill-left)\n                                    Button(Body: LangRes(add), Class: btn btn-primary btn-pill-right, Contract: land_registry_Add, Page: land_registry_records)\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "demo_page_sendPage",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Include(demo_block_sendPage)"
        },
        {
            "Name": "demo_page_sendMessage",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Include(demo_block_sendMessage)"
        },
        {
            "Name": "demo_page_sendContract",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "Include(demo_block_sendContract)"
        },
        {
            "Name": "demo_page_message",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "If(#notific_id#>0){\n    SetTitle($demo_sendMessage$)\n    Div(content-wrapper){\n        Div(row){\n            Div(col-xs-8 col-xs-offset-2 col-lg-6 col-lg-offset-3){\n                Div(panel panel-primary){\n                    Div(panel-heading){$result$}\n                    Div(panel-body){\n                        Div(row){\n                            Div(col-sm-10 col-sm-offset-1 alert alert-default){\n                                Div(h3){#notific_header#}\n                                Div(){#SomeText#}\n                            }\n                            \n                        }.Style(display: flex;align-items: flex-end;)\n                    }\n                    Div(panel-footer clearfix){\n                        Div(pull-right text-right){\n                            Button(Page: price_page, Class: btn btn-primary, Contract: Notifications_Single_Close, Params:\"notific_id=#notific_id#\", PageParams: \"PatentId=#PatentId#\", Body: $close$)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "demo_notifications",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "DBFind(Name: notifications, Source: noti_s).Where(\"closed=0 and notification_type=1 and recipient_id=#key_id#\")\nSetTitle($notifications$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3){\n            Div(panel panel-primary){\n                Div(panel-heading){$notifications$}\n                Div(panel-body){\n                    ForList(noti_s){\n                        Div(Class: list-group-item){\n                            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){\n                                Div(media-box){\n                                    Div(Class: pull-left){\n                                        Em(Class: fa #icon# fa-1x text-info)\n                                    }\n                                    Div(media-box-body clearfix){\n                                        Div(Class: m0 text-normal, Body: #header_text#)\n                                        Div(Class: m0 text-muted h6, Body: #body_text#)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "applications_list",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "Applications",
            "Value": "Div(Class: content-wrapper){\n\n\tSetTitle($applications$)\n\n    Div(Class: row df f-valign){\n        Div(Class: col-md-3)\n        Div(Class: col-md-6){\n\n            Data(src_parameters,\"id,name\"){\n                1,$referendum$\n                2,$land_records$\n            }.Custom(custom_link){\n                If(#id#==1){\n                    LinkPage(Page: referendums_list){        \n                        Div(media-box){\n                            Div(Class: pull-left){\n                                Em(Class: fa fa-2x fa-gavel text-primary)\n                            } \n                            Div(media-box-body clearfix){ \n                                Div(Class: h5 text-bold, Body: #name#)\n                            }\n                        }\n                    }\n                }\n                If(#id#==2){\n                    LinkPage(Page: land_registry_records){        \n                        Div(media-box){\n                            Div(Class: pull-left){\n                                Em(Class: fa fa-2x icon-home text-primary)\n                            } \n                            Div(media-box-body clearfix){ \n                                Div(Class: h5 text-bold, Body: #name#)\n                            }\n                        }\n                    }\n                }\n            }.Custom(custom_value){\n                SysParam(#name#)\n            }.Custom(actions){\n                Span(Class: text-center text-bold, Body: \"Installed\")\n            }\n            \n            Table(src_parameters, \"=custom_link,=actions\")\n\n\t\t}\n\t\tDiv(Class: col-md-3)\n    }\n}"
        },
        {
            "Name": "notifications",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": "DBFind(Name: notifications, Source: noti_s).Where(\"closed=0 and notification_type=1 and recipient_id=#key_id#\")\nDBFind(Name: notifications, Source: noti_r).Where(\"closed=0 and notification_type=2 and (started_processing_id=0 or started_processing_id=#key_id#)\")\n\nForList(noti_s){\n        Div(Class: list-group-item){\n            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){        \n                Div(media-box){\n                    Div(Class: pull-left){\n                        Em(Class: fa #icon# fa-1x text-info)\n                    } \n                    Div(media-box-body clearfix){ \n                        Div(Class: m0 text-normal, Body: #header_text#) \n                        Div(Class: m0 text-muted h6, Body: #body_text#)\n                    }\n                }\n            }\n        }\n}\n\nForList(noti_r){\n    DBFind(Name: roles_assign, Source: src_roles).Where(\"member_id=#key_id# and role_id=#role_id# and delete=0\").Vars(prefix)\n    If(#prefix_id# > 0){\n        Div(Class: list-group-item){\n            LinkPage(Page: #page_name#, PageParams: \"notific_id=#id#,notific_type=#notification_type#,notific_header=#header_text#,#page_params#\"){        \n                Div(media-box){\n                    Div(Class: pull-left){\n                        Em(Class: fa #icon# fa-1x text-primary)\n                    } \n                    Div(media-box-body clearfix){ \n                        Div(Class: m0 text-normal, Body: #header_text#) \n                        Div(Class: m0 text-muted h6, Body: #body_text#)\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "admin_index",
            "Conditions": "true",
            "Menu": "admin_menu",
            "Value": ""
        },
        {
            "Name": "default_page",
            "Conditions": "ContractAccess(\"@1EditPage\")",
            "Menu": "default_menu",
            "Value": ""
        }
    ],
    "blocks": [
        {
            "Name": "land_registry_records",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(#isSearch#==1){\n    SetVar(v_Where, \"delete=0 and land_use=#str_search#\")\n}.Else{\n    SetVar(v_Where, \"delete=0\")\n    SetVar(Name:isSearch, Value: 0)\n}\n\nIf(#isOrder#==1){\n    SetVar(Name:v_Order, Value: \"price\")\n}.ElseIf(#isOrder#==2){\n    SetVar(Name:v_Order, Value: \"area\")\n}.ElseIf(#isOrder#==3){\n    SetVar(Name:v_Order, Value: \"price desc\")\n}.ElseIf(#isOrder#==4){\n    SetVar(Name:v_Order, Value: \"area desc\")\n}.Else{\n    SetVar(Name:v_Order, Value: \"id desc\")\n}\n\nDBFind(Name: land_registry, Source: src_land_registry).Where(#v_Where#).Order(#v_Order#).Custom(_id){\n    Span(#id#)\n}.Custom(_owner){\n    DBFind(Name: members, Source: src_members).Where(\"id=#owner_id#\").Vars(row)\n    LinkPage(Page: profile_view, PageParams: \"v_member_id=#row_id#\"){\n        Span(Class: h5 text-bold, Body: #row_member_name#)\n    }\n}.Custom(_land){\n    Span(EcosysParam(Name: land_use, Index: #land_use#))\n}.Custom(_buildings){\n    Span(EcosysParam(Name: buildings_use_class, Index: #buildings_use_class#))\n}.Custom(_area){\n    Span(#area#)\n}.Custom(_address){\n    Span(#address#)\n}.Custom(_cons){\n    Div(h6){\n        If(#price#>0){\n            Span(#price#)\n        }.Else{\n            Em(Class: fa fa-1x text-muted fa-question-circle)\n        }\n    }.Style(margin-left: 20px;)\n}.Custom(_legal){\n    Div(h6){\n        If(#legal_status#==0){\n            Em(Class: fa fa-1x text-muted fa-question-circle)\n        }\n        If(#legal_status#==1){\n            Em(Class: fa fa-1x text-success fa-check-circle)\n        }\n        If(#legal_status#==2){\n            Em(Class: fa fa-1x text-danger fa-exclamation-circle)\n        }\n    }.Style(margin-left: 20px;)\n}.Custom(_encumberance){\n    Div(h6){\n        If(#encumbrance_certificate#==0){\n            Em(Class: fa fa-1x text-muted fa-question-circle)\n        }\n        If(#encumbrance_certificate#==1){\n            Em(Class: fa fa-1x text-success fa-check-circle)\n        }\n        If(#encumbrance_certificate#==2){\n            Em(Class: fa fa-1x text-danger fa-exclamation-circle)\n        }\n    }.Style(margin-left: 20px;)\n}.Custom(_admin){\n    Div(Class: pull-right){\n        Span(){\n            Button(Page: #this#, Contract: land_registry_Delete, Params: \"LandId=#id#\", Class: btn btn-default fa fa-2x fa-trash)\n        }.Style(margin-left: 5px; margin-right: 5px;)\n        Span(){\n            Button(Page: land_registry_view, PageParams: \"LandId=#id#\", Class: btn btn-default fa fa-2x fa-eye)\n        }.Style(margin-left: 5px; margin-right: 5px;)\n    } \n}\n\nDiv(content-wrapper){\n    Div(panel panel-primary data-sweet-alert){\n\t\tForm(){\n\t\t\tDiv(list-group-item){\n\t\t\t\tDiv(row df f-valign){\n\t\t\t\t\tDiv(col-md-2 mt-sm text-center text-bold){$land_use$}\n\t\t\t\t\tDiv(col-md-7 mc-sm text-left){\n\t\t\t\t\t\tDiv(input-group){\n\t\t\t\t\t\t\tEcosysParam(Name: land_use, Source: src_land_use)\n\t\t\t\t\t\t\tSelect(Name: LandUseSelect, Source: src_land_use, Class: form-control, NameColumn: name, ValueColumn: id, Value: #str_search#)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tDiv(input-group-btn){\n\t\t\t\t\t\t\t\tButton(Page: #this#, PageParams: \"str_search=Val(LandUseSelect),isSearch=1,isOrder=#isOrder#\", Class: btn btn-default fa fa-search)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tDiv(col-md-3 mc-sm text-center){\n\t\t\t\t\t\tDiv(btn-group){\n\t\t\t\t\t\t\tSpan(){\n\t\t\t\t\t\t\t\tIf(#isOrder#==1){\n\t\t\t\t\t\t\t\t\tButton(Page: #this#, Class: btn bg-gray, PageParams: \"isOrder=3,isSearch=#isSearch#,str_search=Val(LandUseSelect)\", Body: Em(Class:fa fa-sort-numeric-asc) $price$)\n\t\t\t\t\t\t\t\t}.ElseIf(#isOrder#==3){\n\t\t\t\t\t\t\t\t\tButton(Page: #this#, Class: btn bg-gray, PageParams: \"isOrder=1,isSearch=#isSearch#,str_search=Val(LandUseSelect)\", Body: Em(Class:fa fa-sort-numeric-desc) $price$)\n\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\tButton(Page: #this#, Class: btn bg-gray-lighter,PageParams: \"isOrder=1,isSearch=#isSearch#,str_search=Val(LandUseSelect)\", Body: $price$)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}.Style(margin-left: 5px; margin-right: 5px;)\n\t\t\t\t\t\t\tSpan(){\n\t\t\t\t\t\t\t\tIf(#isOrder#==2){\n\t\t\t\t\t\t\t\t\tButton(Page: #this#, Class: btn bg-gray, PageParams: \"isOrder=4,isSearch=#isSearch#,str_search=Val(LandUseSelect)\", Body: Em(Class:fa fa-sort-numeric-asc) $area_size$)\n\t\t\t\t\t\t\t\t}.ElseIf(#isOrder#==4){\n\t\t\t\t\t\t\t\t\tButton(Page: #this#, Class: btn bg-gray, PageParams: \"isOrder=2,isSearch=#isSearch#,str_search=Val(LandUseSelect)\", Body: Em(Class:fa fa-sort-numeric-desc) $area_size$)\n\t\t\t\t\t\t\t\t}.Else{\n\t\t\t\t\t\t\t\t\tButton(Page: #this#, Class: btn bg-gray-lighter, PageParams: \"isOrder=4,isSearch=#isSearch#,str_search=Val(LandUseSelect)\", Body: $area_size$)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}.Style(margin-left: 5px; margin-right: 5px;)\n\t\t\t\t\t\t}\n\t\t\t\t\t}.Style(display:flex;)\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(list-group-item){\n\t\t\t\tTable(Source:src_land_registry, Columns: \"ID=_id,$owner$=_owner,$area_size$=_area,$address$=_address,$consideration_value$(INR)=_cons,$legal_status$=_legal,$encumbrance_certificate$=_encumberance,=_admin\")\n\t\t\t\tIf(#isSearch#==1){\n\t\t\t\t\tForm(text-center){\n\t\t\t\t\t\tButton(Page: #this#, PageParams:\"isSearch=0\", Class: btn btn-primary btn-oval){\n\t\t\t\t\t\t\tLangRes(view_all)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tDiv(panel-footer){\n\t\t\t\tDiv(clearfix){\n\t\t\t\t\tForm(pull-right){\n\t\t\t\t\t\tButton(Page: land_registry_add, Class: btn btn-primary, Body: $add$)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n}"
        },
        {
            "Name": "land_registry_edit",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "If(GetVar(LandId)){}.Else{\n    SetVar(LandId, 1)\n}\n\nIf(#admin#==1){\n    SetTitle($depart_role2$)\n}.Else{\n    SetTitle($owner$)\n}\n\nEcosysParam(Name: land_yes_no, Source: src_yes_no)\nIf(GetVar(LandId)){\n    DBFind(Name: land_registry, Source: src_entry).WhereId(#LandId#).Vars(entry)\n    DBFind(Name: members, Source: src_owners).Where(id=#entry_owner_id#).Vars(owner)\n}\nDiv(content-wrapper red){\n    Div(breadcrumb){\n        Div(){\n            LinkPage(LangRes(land_records), land_registry_records, PageParams: \"admin=#admin#\").Style(margin-right: 10px;)\n            Span(/).Style(margin-right: 10px;)\n            Span(LangRes(land_records_edit) ##LandId#, text-muted).Style(margin-right: 10px;)\n        }\n    }\n    Div(row df f-valign){\n        \n        Div(col-sm-8 col-sm-offset-2 col-lg-6 col-lg-offset-3 mt-sm text-left){\n            Div(panel panel-primary data-sweet-alert){\n                Form(){\n                    Div(Class: list-group-item text-center){\n                        Span(Class: h3, Body: LangRes(land_records_edit))\t\n                    }\n                    Div(list-group-item){\n                        Map(Hmap:300, MapType: hybrid, Value: #entry_map_coords#)\n                    }\n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-5 mt-sm text-right h5){\n                                Strong($owner$:)\n                            }\n                            Div(col-md-6 mt-sm text-left h5){\n                                Div(){\n                                    Span(#owner_member_name#)\n                                }\n                            }\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-5 mt-sm text-right h5){\n                                Strong($area_size$)\n                                (Span(m).(2).Style(vertical-align: super;font-size:small;)):\n                            }\n                            Div(col-md-7 mt-sm text-left h5){#entry_area#}\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-5 mt-sm text-right h5){\n                                Strong($address$:)\n                            }\n                            Div(col-md-7 mt-sm text-left h5){#entry_address#}\n                        }\n                        \n                        Div(row df f-valign){\n                            Div(col-md-5 mt-sm text-right h5){Strong($record_add_date$:)}\n                            Div(col-md-7 mt-sm text-left h5){DateTime(#entry_date_create#)}\n                        }\n                        \n                        Div(row df){\n                            Div(col-md-5 mt-sm text-right h5){Strong($buildings_use_class$:)}\n                            Div(col-md-7 mt-sm text-left h5){\n                                EcosysParam(Name: buildings_use_class, Index: #entry_buildings_use_class#)\n                            }\n                        }\n                        \n                        Div(row df){\n                            Div(col-md-5 mt-sm text-right h5){Strong($land_nature$:)}\n                            Div(col-md-7 mt-sm text-left h5){\n                                EcosysParam(Name: land_nature, Index: #entry_land_nature#)\n                            }\n                        }\n                    }\n\n                    \n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right h5){Strong(LangRes(consideration_value))}\n                            Div(col-md-8 mt-sm text-left h5){\n                                If(#admin#==1){\n                                    If(GetVar(entry_price)){\n                                        #entry_price#\n                                    }\n                                }.Else{\n                                    Input(Name: Price,Class: form-control input-sm, Value: #entry_price#, Type: number)\n                                }\n                            }\n                        }\n                    }\n                    \n                    Div(list-group-item){\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right h5){Strong(LangRes(encumbrance_certificate))}\n                            Div(col-md-8 mt-sm text-left h5){\n                                If(#admin#==1){\n                                    Div(form-inline){\n                                        RadioGroup(Name: EncumbranceCertificate,Class: form-control, Value: #entry_encumbrance_certificate#, Source: src_yes_no, ValueColumn: id, NameColumn: name)\n                                    }\n                                }.Else{\n                                    If(GetVar(entry_encumbrance_certificate)){\n                                        Span(EcosysParam(Name: land_yes_no, Index: #entry_encumbrance_certificate#))\n                                    }.Else{\n                                        LangRes(undefined)\n                                    }\n                                }\n                            }\n                        }\n                        Div(row df f-valign){\n                            Div(col-md-4 mt-sm text-right h5){Strong(LangRes(legal_status))}\n                            Div(col-md-8 mt-sm text-left h5){\n                                If(#admin#==1){\n                                    Div(form-inline){\n                                        RadioGroup(Name: LegalStatus,Class: form-control, Value: #entry_legal_status#, Source: src_yes_no, ValueColumn: id, NameColumn: name)\n                                    }\n                                }.Else{\n                                    If(GetVar(entry_legal_status)){\n                                        Span(EcosysParam(Name: land_yes_no, Index: #entry_legal_status#))\n                                    }.Else{\n                                        LangRes(undefined)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \n                    \n                    Div(panel-footer){\n                        Div(clearfix){\n                            Div(pull-right){\n                                Input(Name: LandId, Type: hidden, Value: #LandId#)\n                                Div(btn-group){\n                                    Button(Page: land_registry_records, Body: $back$, Class: btn btn-default btn-pill-left, PageParams: \"admin=#admin#\")\n                                    \n                                    If(#admin#==1){\n                                        Button(Body: $save$, Class: btn btn-primary btn-pill-right, Contract: land_registry_UpdateAdmin, Params: \"NotificId=#notific_id#\", Page: land_registry_records)\n                                    }.Else{\n                                        Button(Body: $save$, Class: btn btn-primary btn-pill-right, Contract: land_registry_UpdateOwner, Params: \"Price=Val(Price),NotificId=#notific_id#\", Page: land_registry_records)\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "demo_block_sendPage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(parameters).Where(name='founder_account').Vars(founder)\nSetTitle($demo_title$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h4){LangRes(input)}\n            Div(panel panel-primary){\n                Form(panel-body input-group){\n                    Input(Name: Parti, Type:text, Placeholder:Enter text, Value: Hello World!)\n                    Div(input-group-btn){\n                        Button(Body:$send_page$, Page:demo_page_sendPage, PageParams: \"pageValue=Val(Parti)\", Class:btn btn-primary)\n                    }\n                }\n            }\n            \n            \n            Div(h4){LangRes(result)}\n            Div(panel panel-primary){\n            \n                    #pageValue#\n               \n            }\n            \n            Div(h4){LangRes(code)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    If(#founder_value#==#key_id#){\n                        Div(h5){\n                            DBFind(blocks).Where(name='demo_block_sendPage').Vars(page)\n                            LinkPage(Page: \"edit-block\", PageParams: \"id=#page_id#\"){ $edit_page$ }\n                        }\n                    }.Else{\n                        Div(h5 text-bold){$page_code$}\n                    }\nCode(\n    Form(panel-body input-group){\n        Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n        Div(input-group-btn){\n            Button(Body:Send to Page, Page:demo_page_sendPage, PageParams: \"pageValue=Val(SomeText)\", Class:btn btn-primary)\n        }\n    }\n)\n                }\n            }\n            \n            Div(h4){LangRes(description)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    LangRes(demo_description_sendPage)\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "demo_block_sendMessage",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(parameters).Where(name='founder_account').Vars(founder)\nSetTitle($demo_title$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h4){LangRes(input)}\n            Div(panel panel-primary){\n                Form(panel-body){\n                    Div(row){\n                        Div(col-sm-6){\n                            Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n                        }\n                        Div(col-sm-6){\n                            Div(input-group){\n                                DBFind(Name: members, Source: src_member)\n                                Select(Name: MemberId, Source: src_member, NameColumn: member_name, ValueColumn: id)\n                                Div(input-group-btn){\n                                    Button(Body: $send_notify$, Contract: DemoNotificationSingle, Class:btn btn-primary, Params: \"MemberId=Val(MemberId)\")\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            Div(h4){LangRes(code)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    If(#founder_value#==#key_id#){\n                        Div(h5){\n                            DBFind(blocks).Where(name='demo_block_sendMessage').Vars(page)\n                            LinkPage(Page: \"edit-block\", PageParams: \"id=#page_id#\"){ $edit_page$ }\n                        }\n                    }.Else{\n                        Div(h5 text-bold){$page_code$}\n                    }\n                    Div(){\nCode(\n    Form(panel-body){\n        Div(col-sm-6){\n            Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n        }\n        Div(col-sm-6){\n            Div(input-group){\n                DBFind(Name: members, Source: src_member)\n                Select(Name: MemberId, Source: src_member, NameColumn: member_name, ValueColumn: id)\n                Div(input-group-btn){\n                    Button(Body: Send Notification, Contract: DemoNotificationSingle, Class:btn btn-primary, Params: \"MemberId=Val(MemberId)\")\n                }\n            }\n        }\n    }\n)\n                    }\n                    If(#founder_value#==#key_id#){\n                        Div(h5){\n                            LinkPage(Page: \"edit-contract\", PageParams: \"name=DemoNotificationSingle\"){ $edit_contract$ }\n                        }\n                    }.Else{\n                        Div(h5 text-bold){$contract_code$}\n                        \n                    }\nCode(\n    contract DemoNotificationSingle {\n        data {\n            MemberId int\n            SomeText string\n        }\n        \n        conditions {\n            $iconName = \"fa-bell\"\n            $textHeader=\"You got a message\"\n            $pageName=\"demo_page_message\"\n            $paramsVal= Sprintf(\"SomeText=%v\", $SomeText)\n            $textBody = $SomeText\n        }\n        \n        action {\n            Notifications_Single_Send(\"MemberId,IconName,TextHeader,TextBody,PageName,ParamsVal\", $MemberId, $iconName, $textHeader, $textBody, $pageName, $paramsVal)\n        }\n    }\n)\n                }\n            }\n            \n            Div(h4){LangRes(description)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    LangRes(demo_description_sendMessage)\n                }\n            }\n        }\n    }\n}"
        },
        {
            "Name": "demo_block_sendContract",
            "Conditions": "ContractConditions(\"MainCondition\")",
            "Value": "DBFind(parameters).Where(name='founder_account').Vars(founder)\nSetTitle($demo_title$)\nDiv(content-wrapper){\n    Div(row){\n        Div(col-lg-8 col-lg-offset-2){\n            Div(h4){LangRes(input)}\n            Div(panel panel-primary){\n                Form(panel-body input-group){\n                    Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n                    Div(input-group-btn){\n                        Button(Body:$send_contract$, Contract: DemoContract, Page: demo_page_sendContract, Class:btn btn-primary)\n                    }\n                }\n            }\n            \n            \n            DBFind(Name:demo_page_table, Source: me_table_exist).Where(\"id>0\").Vars(exist)\n            If(#exist_id#>0){\n                Div(h4){LangRes(result)}\n                Div(panel panel-primary){\n                    Div(panel-body){\n                        DBFind(Name:demo_page_table, Source: my_table)\n                        Div(table-responsive){\n                            Table(Source: my_table, Columns:\"id=member_id,name=member_name,text=some_text\")\n                        }\n                    }\n                }\n            }\n            \n            Div(h4){LangRes(code)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    If(#founder_value#==#key_id#){\n                        Div(h5){\n                            DBFind(blocks).Where(name='demo_block_sendContract').Vars(page)\n                            LinkPage(Page: \"edit-block\", PageParams: \"id=#page_id#\"){ $edit_page$ }\n                        }\n                        Div(h5){\n                            LinkPage(Page: \"edit-contract\", PageParams: \"name=DemoContract\"){ $edit_contract$ }\n                        }\n                    }.Else{\n                        Div(h5 text-bold){$page_code$}\n                    }\nCode(\n    Form(panel-body input-group){\n        Input(Name: SomeText, Type:text, Placeholder:Enter text, Value: Hello World!)\n        Div(input-group-btn){\n            Button(Body:Send to Contract, Contract: DemoContract, Page: demo_page_sendContract, Class:btn btn-primary)\n        }\n    }\n    DBFind(Name:demo_page_table, Source: my_table)\n    Div(table-responsive){\n        Table(Source: my_table, Columns:\"id=member_id,name=member_name,text=some_text\")\n    }\n)\n                }\n            }\n            \n            Div(h4){LangRes(description)}\n            Div(panel panel-primary){\n                Div(panel-body){\n                    LangRes(demo_description_sendContract)\n                }\n            }\n        }\n    }\n}"
        }
    ],
    "menus": [
        {
            "Name": "Applications",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title:$referendum$, Page:referendums_list, Icon:\"fa fa-gavel\")\nMenuItem(Title: $land_records$, Page: land_registry_records,Icon: \"fa icon-home\")"
        },
        {
            "Name": "admin_menu",
            "Conditions": "true",
            "Value": "MenuItem(\n    Icon: \"icon-screen-desktop\",\n    Page: \"interface\",\n    Title: \"Interface\"\n)\nMenuItem(\n    Icon: \"icon-docs\",\n    Page: \"tables\",\n    Title: \"Tables\"\n)\nMenuItem(\n    Icon: \"icon-briefcase\",\n    Page: \"contracts\",\n    Title: \"Smart Contracts\"\n)\nMenuItem(\n    Icon: \"icon-settings\",\n    Page: \"parameters\",\n    Title: \"Ecosystem parameters\"\n)\nMenuItem(\n    Icon: \"icon-globe\",\n    Page: \"languages\",\n    Title: \"Language resources\"\n)\nMenuItem(\n    Icon: \"icon-cloud-upload\",\n    Page: \"import\",\n    Title: \"Import\"\n)\nMenuItem(\n    Icon: \"icon-cloud-download\",\n    Page: \"export\",\n    Title: \"Export\"\n)\nIf(\"#key_id#\" == EcosysParam(\"founder_account\")){\n    MenuItem(\n        Icon: \"icon-lock\",\n        Page: \"vde\",\n        Title: \"Dedicated Ecosystem\"\n    )\n}"
        },
        {
            "Name": "default_menu",
            "Conditions": "ContractAccess(\"@1EditMenu\")",
            "Value": "MenuItem(Title: \"Регистрация патента\", Page: create_patent_page, Icon:fa fa-address-card-o)\nMenuItem(Title: \"Список моих патентов\", Page: patents_page, Icon:fa fa-address-card-o)\nMenuItem(Title: \"Поиск патентов\", Page: search_page, Icon:fa fa-address-card-o)\nMenuItem(Title: \"Мои договоры\", Page: my_contracts_page, Icon:fa fa-address-card-o)\nMenuItem(Title: \"Метрика\", Page: metric_page, Icon:fa fa-address-card-o)\nMenuItem(Title: $notifications$, Page: demo_notifications, Icon:fa fa-inbox)"
        }
    ],
    "parameters": [
        {
            "Name": "founder_account",
            "Value": "-101737048994134840",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "new_table",
            "Value": "ContractConditions(\"MainCondition\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "changing_tables",
            "Value": "ContractConditions(\"MainCondition\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "changing_language",
            "Value": "ContractConditions(\"MainCondition\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "changing_signature",
            "Value": "ContractConditions(\"MainCondition\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "changing_page",
            "Value": "ContractConditions(\"MainCondition\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "changing_menu",
            "Value": "ContractConditions(\"MainCondition\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "changing_contracts",
            "Value": "ContractConditions(\"MainCondition\")",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "ecosystem_name",
            "Value": "",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "max_sum",
            "Value": "1000000",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "money_digit",
            "Value": "2",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "stylesheet",
            "Value": "body {\n\t\t  /* You can define your custom styles here or create custom CSS rules */\n\t\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "max_block_user_tx",
            "Value": "100",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "min_page_validate_count",
            "Value": "1",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "max_page_validate_count",
            "Value": "6",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "buildings_use_class",
            "Value": "Shops,Financial and professional services,Restaurants and cafes,Business,Hotels,Dwellinghouses,Non-residential institutions,No",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "business_scope",
            "Value": "Agriculture,Financial services,Entertainment and mass media,Industrial manufacturing,Real estate,Retail,Transportation,Utilities,Service businesses",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_buildings_use_class",
            "Value": "Shops,Financial and professional services,Restaurants and cafes,Business,Hotels,Dwellinghouses,Non-residential institutions,No",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_ec_status",
            "Value": "No Issues,Have Issues",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_local_body",
            "Value": "Minor Gram Panchayat,Major Gram Panchayat,Other Municipality/Notified Area,Municipal Corporation",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_nature",
            "Value": "0101 Sale Deed,0111 AGREEMENT OF SALE CUM GPA,0202 Mortgage without Possession,0206 Mortgage deed by small farmer for Agrl.loans in f/o PAC/Bank,0208 Deposit of Title Deeds,0302 Gift Settlement in f/o family member,0303 Gift Settlement in f/o others,0304 Gift Settlement for Charitable/religious purposes,0401 Partition,0402 Partition among Family Members,0505 RECEIPT(R.T.D.M),0701 Lease Deed,0801 Rectification Deed,0803 Cancellation Deed",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_use",
            "Value": "01 Residential-U,09 URBAN VacantLand(Residential)-U,21 Dry land-R,26 Wet Land double crop-R,27 Wet Land single crop-R,30 Coconut Garden-R",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_yes_no",
            "Value": "no_problem,problem",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "legal_status",
            "Value": "No Issues,Title Not Clear,Multiple Owner Claims,Khata Not Clear",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_closure",
            "Value": "single,multiple",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_icon",
            "Value": "fa-bell,fa-comment,fa-envelope,fa-bookmark,fa-check,fa-exclamation-triangle,fa-info-circle",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "notification_type",
            "Value": "single,role",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "patent_type",
            "Value": "Тип1, Тип2, Тип3",
            "Conditions": "ContractAccess(\"MainCondition\")"
        },
        {
            "Name": "type_patent",
            "Value": "Тип1,Тип2,Тип3",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "languages": [],
    "contracts": [
        {
            "Name": "EditActor",
            "Value": "contract EditActor {\n    conditions {\n\n        if (EcosysParam(\"founder_account\") != $key_id) {\n            $memberID = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\n            if $member {\n                if ($key_id != Int($member[\"id\"])) {\n                    error \"no permission\"\n                }\n            } else {\n                error \"no user\"\n            }\n        }\n\n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "CheckRospat",
            "Value": "contract CheckRospat {\n    data {\n\n    }\n\n    conditions {\n        if EcosysParam(\"founder_account\") != $key_id {\n            $member = DBFind(\"members\").Where(\"id=?\", $key_id).Row()\n            if $member {\n                if (Int($member[\"rospat\"]) == 0) {\n                    error \"not rospat\"\n                }\n            } else {\n                error \"not rospat\"\n            }\n        }\n    }\n\n    action {\n\n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "ChangePatentStatus",
            "Value": "contract ChangePatentStatus {\n    data {\n        Status int\n    }\n\n    conditions {\n        if ($Status == 1){\n            CallContract(\"CheckRospat\",nil)\n        }\n\n        if ($Status == 2){\n            CallContract(\"EditActor\",nil)\n        }\n\n        if ($Status == 3){\n            CallContract(\"CheckRospat\",nil)\n        }\n    }\n\n    action {\n\n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "ChangePossessionStatus",
            "Value": "contract ChangePossessionStatus {\n    data {\n        Status int\n        ID int\n    }\n\n    conditions {\n        if ($Status == 1){\n            $owner = DBFind(\"possession\").Where(\"id=?\",$ID).One(\"owner_id\")\n            if($key_id != $owner){\n                error \"no rights\"\n            }\n            CallContract(\"CheckRospat\",nil)\n        }\n\n        if ($Status == 2){\n            CallContract(\"CheckRospat\",nil)\n        }\n\n        if ($Status == 3){\n           $owner = DBFind(\"possession\").Where(\"id=?\",$ID).One(\"owner_id\")\n           $actor = DBFind(\"possession\").Where(\"id=?\",$ID).One(\"actor_id\")\n            if ($key_id == $owner || $key_id == $actor){\n                \n            }else{\n                error \"no rights\"\n            }\n        }\n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "ApproveContract",
            "Value": "contract ApproveContract {\n    data {\n        PatentId int\n        Action int\n    }\n\n    conditions {\n    }\n\n    action {\n\n        var id int\n        id = DBFind(\"possession\").Where(\"patent_id = ?\", $PatentId).One(\"id\")\n\n\n        if (Int($Action) == 0) { \n            DBUpdate(\"possession\", Int(id), \"status\", 2)\n        } else {\n            DBUpdate(\"possession\", Int(id), \"status\", 3)\n        }\n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "SendConditionRequest",
            "Value": "contract SendConditionRequest {\n    data {\n        PatentId int  \n        ActorId int \n        ConditionType int \n        Comment string \"optional\" \n        DayCount int\n    }\n\n    conditions {\n        var total int\n        var ret map\n\n        ret = DBRow(\"pricelists\").Columns(\"day_price, exclusive_price\").Where(\"patent_id = ?\", $PatentId).Where(\"actor_id = ?\", $ActorId)\n        //но лучше так\n        //ret = DBFind(\"pricelists\").Columns(\"day_price,exclusive_price\").Where(\"patent_id = $ and actor_id = $\", $PatentId, $ActorId)\n\n        if ($ConditionType == 0) {\n            $total = ret[\"day_price\"] * $DayCount\n        } else {\n            $total = ret[\"exclusive_price\"]\n        }\n\n        var row map\n\t\trow = DBRow(\"keys\").Columns(\"amount\").WhereId($key_id)\n\t\t$amount = Money(row[\"amount\"])\n\t\tif $amount < $total {\n\t\t\terror Sprintf(\"Money is not enough %v < %v\",total, $amount)\n\t\t}\n    }\n\n    action {\n        var ret map\n        ret = DBRow(\"possession\").Where(\"patent_id = ?\", $PatentId).Where(\"actor_id = ?\", $ActorId)\n        DBInsert(\"possession\", \"request_date, territory_ids, exclusive, patent_id, usage_type, status, actor_id, resell_flag\", \"15.04.2018\", ret[\"territory_ids\"], $ConditionType, ret[\"patent_id\"], ret[\"usage_type\"], 0, $ActorId, ret[\"resell_flag\"])\n\n        var icon, header, body, page, params string\n        icon = \"fa-bell\"\n        header = \"Вы получили новое сообщение\"\n        body = \"Новая заявка на покупку патента\"\n        page = \"agreement_page\"\n        params = Sprintf(\"SomeText=%v\", body)\n        \n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", EcosysParam(\"founder_account\"), icon, header, body, page, params)\n    }\n}",
            "Conditions": "true"
        },
        {
            "Name": "SavePrice",
            "Value": "contract SavePrice {\n    data {\n        PatentId int\n        DayPrice int\n        UltimatePrice int\n        Comment string\n    }\n\n    conditions {\n        //if $DayPrice < 0 {\n        //    error \"Форма заполнена неправильно\"\n        //}\n        //if $UltimatePrice < 0 {\n        //    error \"Форма заполнена неправильно\"\n        //}\n    }\n\n    action {\n        DBInsert(\"pricelists\", \"day_price,patent_id,exclusive_price,actor_id,comments\", $DayPrice, $PatentId, $UltimatePrice, $key_id, $Comment)\n        DBUpdate(\"patents\", $PatentId, \"status\", 2)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "SavePatent",
            "Value": "contract SavePatent {\n    data {\n        PatentName string\n        Authors string \n        KeyWords string \n        PatentType string\n        PatentFormul string \n        Comment string \"optional\"\n        ApproveDate string \"date\"\n        RequestDate string \"date\"\n    }\n\n    conditions {}\n\n    action {\n        $patent_id = DBInsert(\"patents\", \"formula, add_info, key_words, request_date, registration_date, type, title, authors, status\", $PatentFormul, $Comment, $KeyWords, $RequestDate, $ApproveDate, 0, $PatentName, $Authors, 1)\n        $result = $patent_id\n        //делаем запрос на сервер Роспатента для получения дополнительной информации\n        var params map\n        params[\"usage_type\"] = 1\n        params[\"request_date\"] = \"12.04.2017\"\n        params[\"territory_ids\"] = \"1,2,3,4\"\n        params[\"exclusive\"] = 1\n        params[\"patent_id\"] = $patent_id\n        params[\"stop_date\"] = \"31.01.2019\"\n        params[\"register_date\"] = \"12.06.2017\"\n        params[\"cancelation_type\"] = 0\n        params[\"actor_id\"] = $key_id\n        params[\"start_date\"] = \"20.07.2017\"\n        params[\"resell_flag\"] = 0\n\n        //DBInsert(\"possessions\", \"usage_type,request_date,territory_ids,cancelation_date,exclusive,patent_id,stop_date,register_date,cancelation_type,actor_id,start_date,resell_flag\", )\n        DBInsert(\"possession\", \"usage_type,request_date,territory_ids,exclusive,patent_id,stop_date,register_date,cancelation_type,actor_id,start_date,resell_flag\", params[\"usage_type\"], params[\"request_date\"], params[\"territory_ids\"],params[\"exclusive\"],params[\"patent_id\"],params[\"stop_date\"],params[\"register_date\"],params[\"cancelation_type\"],params[\"actor_id\"],params[\"start_date\"],params[\"resell_flag\"])\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NotificationRequestAccept",
            "Value": "contract NotificationRequestAccept {\n    data {\n        MemberId int\n        Name string\n        PatentId int\n    }\n    \n    conditions {}\n    \n    action {\n        var icon, header, body, page, params string\n        icon = \"fa-bell\"\n        header = \"Вы получили новое сообщение\"\n        body = $Name\n        page = \"demo_page_message\"\n        params = Sprintf(\"SomeText=%v, PatentId=%v\", $Name, $PatentId)\n\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", $MemberId, icon, header, body, page, params)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "SendPatentRequest",
            "Value": "contract SendPatentRequest {\n    data {\n        RegistrationNumber string\n        PatentName string\n        Authors string \n        KeyWords string \n        PatentType string\n        PatentFormul string \n        Comment string \"optional\"\n        ApproveDate string \"date\"\n        RequestDate string \"date\"\n    }\n\n    conditions {\n        //эмуляция запроса на поиск патента в Роспатенте и в других официальных открытых источниках\n        var patents array\n        patents[0] = \"Патент5\"\n        patents[1] = \"Patent6\"\n        patents[2] = \"Patent7\"\n\n        var i int\n        var isValid bool\n        while(i < Len(patents)) {\n            if (patents[i] == $PatentName) {\n                isValid = true\n                break\n            }\n            i = i + 1\n        }\n        if !isValid {\n            error \"Такого патента нет\"\n        }\n\n        //проверка что такого патента еще нет в блокчейне (в идеале надо выделить в несколько смартконтрактов)\n        var ret map\n        ret = DBFind(\"patents\").Columns(\"title\").Where(\"title = ?\", $PatentName).One(\"title\")\n        if ret != nil {\n             error \"Такой патент уже зарегистрирован\"\n        }\n    }\n    action {\n        //сохраняем патент и всю необходимую информацию из реестра Роспатента в блокчейн\n        var param map\n        param[\"PatentName\"] = $PatentName\n        param[\"Authors\"] = $Authors\n        param[\"KeyWords\"] = $KeyWords \n        param[\"PatentType\"] = $PatentType\n        param[\"PatentFormul\"] = $PatentFormul\n        param[\"Comment\"] = $Comment\n        param[\"ApproveDate\"] = $ApproveDate\n        param[\"RequestDate\"] = $RequestDate\n        $result = CallContract(\"SavePatent\", param)\n\n        // кидаем нотификейшен юзеру, что патент прошел проверку \n        NotificationRequestAccept(\"MemberId,Name,PatentId\", $key_id, Sprintf(\"Проверка патента %s успешно проведена\", $PatentName), $result)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "SendComment",
            "Value": "contract SendComment {\n    data {\n        CommentText string\n    }\n    \n    conditions {\n        $member = DBFind(\"members\").WhereId($key_id).Row()\n        if !$member {\n            info \"Member not found\"\n        }\n    }\n    action {\n        DBInsert(\"comment\", \"author,is_approved,text\", $member[\"member_name\"], 0, $CommentText)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "ApproveComment",
            "Value": "contract ApproveComment {\n    data {\n        CommentID int\n    }\n\n    conditions {\n        $member = DBFind(\"members\").WhereId($key_id).Row()\n        if $member[\"id\"] != EcosysParam(\"founder_account\") {\n            info \"Not allowed\"\n        }  \n    }\n\n    action {\n        DBUpdate(\"comment\", $CommentID, \"is_approved\", 1)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "referendums_reject",
            "Value": "contract referendums_reject {\n    data {\n        referendum_id int\n    }\n\n    conditions {\n        $referendums_map = DBFind(\"referendums\").Where(\"id=$\", $referendum_id).Row()\n        if ($referendums_map[\"id\"] == nil) {\n            warning \"Referendum not found\"\n        }\n\n\t\t$participant_id = DBFind(\"referendums_participants\").Where(\"referendum_id=$ and member_id=$\", $referendum_id, $key_id).One(\"id\")\n        if ($participant_id != nil){\n\t\t\twarning \"You already voted\"\n\t\t}\n\n        $votes_total = Int($referendums_map[\"votes_total\"])\n        $votes_accept = Int($referendums_map[\"votes_accept\"])\n        $votes_reject = Int($referendums_map[\"votes_reject\"])\n        $percent_accept = Int($referendums_map[\"percent_accept\"])\n        $percent_reject = Int($referendums_map[\"percent_reject\"])\n    }\n\n    action {\n        $votes_total = $votes_total + 1\n        $votes_reject = $votes_reject + 1\n\n        $percent_accept = $votes_accept * 100 / $votes_total\n        $percent_reject = 100 - $percent_accept\n\n        DBUpdate(\"referendums\", $referendum_id, \"votes_total,votes_accept,votes_reject,percent_accept,percent_reject\", $votes_total, $votes_accept, $votes_reject, $percent_accept, $percent_reject)\n        DBInsert(\"referendums_participants\", \"referendum_id,member_id,decision\", $referendum_id, $key_id, -1)\n\n        var params string\n        params = \"referendum_id=\" + Str($referendum_id)\n        $notific_id = DBFind(\"notifications\").Where(\"page_name=$ and page_params=$ and recipient_id=$ and closed=$\", \"referendums_view\", params, $key_id, 0).One(\"id\")\n        if ($notific_id != nil){\n            Notifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "referendums_add",
            "Value": "contract referendums_add {\n    data {\n        referendum_name string\n        question string\n    }\n\n    conditions {}\n\n    action {\n        $referendum_id = DBInsert(`referendums`, `name,question`, $referendum_name, $question)\n\n        $ret_member = DBFind(\"members\").Where(\"id != $\", 0).Order(\"id\")\n        $i = 0\n        while($i < Len($ret_member)){\n            $vals_member = $ret_member[$i]\n            \n\t\t\tvar params string\n\t\t\tparams = \"referendum_id=\" + Str($referendum_id)\n            \n\t\t\tNotifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", \n\t\t\t\t\t\t\t\t$vals_member[\"id\"], \"fa-check\", \"Referendum\", $referendum_name, \"referendums_view\", params)\n\n            $i = $i + 1\n        } \n\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "referendums_accept",
            "Value": "contract referendums_accept {\n    data {\n        referendum_id int\n    }\n\n    conditions {\n        $referendums_map = DBFind(\"referendums\").Where(\"id=$\", $referendum_id).Row()\n        if ($referendums_map[\"id\"] == nil) {\n            warning \"Referendum not found\"\n        }\n\n\t\t$participant_id = DBFind(\"referendums_participants\").Where(\"referendum_id=$ and member_id=$\", $referendum_id, $key_id).One(\"id\")\n        if ($participant_id != nil){\n\t\t\twarning \"You already voted\"\n\t\t}\n\n        $votes_total = Int($referendums_map[\"votes_total\"])\n        $votes_accept = Int($referendums_map[\"votes_accept\"])\n        $votes_reject = Int($referendums_map[\"votes_reject\"])\n        $percent_accept = Int($referendums_map[\"percent_accept\"])\n        $percent_reject = Int($referendums_map[\"percent_reject\"])\n    }\n\n    action {\n        $votes_total = $votes_total + 1\n        $votes_accept = $votes_accept + 1\n\n        $percent_accept = $votes_accept * 100 / $votes_total\n        $percent_reject = 100 - $percent_accept\n\n        DBUpdate(\"referendums\", $referendum_id, \"votes_total,votes_accept,votes_reject,percent_accept,percent_reject\", $votes_total, $votes_accept, $votes_reject, $percent_accept, $percent_reject)\n        DBInsert(\"referendums_participants\", \"referendum_id,member_id,decision\", $referendum_id, $key_id, 1)\n\n        var params string\n        params = \"referendum_id=\" + Str($referendum_id)\n        $notific_id = DBFind(\"notifications\").Where(\"page_name=$ and page_params=$ and recipient_id=$ and closed=$\", \"referendums_view\", params, $key_id, 0).One(\"id\")\n        if ($notific_id != nil){\n            Notifications_Single_Close(\"notific_id\", Int($notific_id))\n\t\t}\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_UpdateOwner",
            "Value": "contract land_registry_UpdateOwner{\n    data{\n        LandId int\n        NotificId string \"optional\"\n        Price string\n    }\n    \n    func conditions{\n        $Price = Int($Price)\n        $NotificId = Int($NotificId)\n        var entry map\n        entry = DBFind(\"land_registry\").Where(\"id=? and owner_id=?\",$LandId, $key_id).Row()\n        if !entry{\n            info \"You cant change this Land\"\n        }\n    }\n    \n    func action{\n        DBUpdate(\"land_registry\", $LandId, \"price,timestamp modification_date\", $Price, $block_time)\n        if $NotificId > 0{\n            Notifications_Single_Close(\"notific_id\", $NotificId)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_UpdateAdmin",
            "Value": "contract land_registry_UpdateAdmin{\n    data {\n        LandId int\n        EncumbranceCertificate int\n        LegalStatus int\n        NotificId int\n    }\n    func conditions {\n        $land = DBFind(\"land_registry\").Where(\"id=?\", $LandId).Row()\n        if !$land{\n            warning \"Land not found in registry\"\n        }\n        $name = DBFind(\"members\").Where(\"id=?\", $key_id).One(\"member_name\")\n    }\n    \n    func action { \n        DBUpdate(\"land_registry\", $LandId, \"legal_status,encumbrance_certificate\", $LegalStatus, $EncumbranceCertificate)\n        Notifications_Single_Close(\"notific_id\", $NotificId)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_SecondRequest",
            "Value": "contract land_registry_SecondRequest{\n    data{\n        LandId int\n    }\n    \n    func action{\n        var icon, header, body, page, notifyParams, params string\n        notifyParams = \"role_id,closure_type,icon_name,text_header,text_body,page_name,params_val\"\n        icon = \"fa-bell\"\n        header = \"$new_land$\"\n        body = \"$need_your_processing$\"\n        params = Sprintf(\"LandId=%v,admin=1,second_request=1\", $LandId)\n        page = \"land_registry_edit\"\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", $key_id,icon,header,body,page,params)        \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_Delete",
            "Value": "contract land_registry_Delete{\n    data{\n        LandId int\n    }\n    \n    func conditions{}\n    \n    func action{\n        DBUpdate(\"land_registry\", $LandId, \"delete\", \"1\")\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "land_registry_Add",
            "Value": "contract land_registry_Add{\n    data{\n        OwnerId int\n        Coords string // {\"coords\":[{\"lat\":float,\"lng\":float},],\"area\": float,\"address\": string}\n        BuildingsUseClass int\n        LandNature int\n        RegistrationDate string \"optional\"\n    }\n    \n    func conditions{\n        var member map\n        member = DBFind(\"members\").Where(\"id = ?\", $OwnerId).Row()\n        if !member {\n            warning \"Member account for Owner not found\"\n        }\n        $coordsMap = JSONToMap($Coords)\n        $coordsAddress = $coordsMap[\"address\"]\n        $area = $coordsMap[\"area\"]\n        $area = Sprintf(\"%.0f\", $area)\n        \n        if !$coordsAddress {\n            info \"Please input address\"\n        }\n        if $area <= 0 {\n            info \"Please use map for input of the area coordinates\"\n        }\n    }\n    \n    func action{\n        var icon, header, body, page, params, roleParams, coords_address string\n        var closureType, landId, landUse, landLocalBody, area int\n        landId = DBInsert(\"land_registry\", \"owner_id,address,area,buildings_use_class,map_coords,land_use,timestamp date_create,delete,land_nature,land_local_body,registration_date,timestamp modification_date\", $OwnerId, $coordsAddress, $area, $BuildingsUseClass, $Coords, landUse, $block_time, 0, $LandNature, landLocalBody, $RegistrationDate, $block_time)\n        \n        DBInsert(\"land_registry_ownership\", \"step, timestamp date_creat, timestamp date_signing, lend_object_id, owner_id, owner_new_id\", -1, $block_time, $block_time, landId, $OwnerId, $OwnerId)\n        \n        icon = \"fa fa-bell-o\"\n        header = \"Department of Legal Affairs: $new_land$\"\n        body = \"$need_your_processing$\"\n        \n        var keys_map map\n        keys_map = DBFind(\"keys\").Where(\"id != ?\", $key_id).Order(\"id\").Row()\n\n        var key_for_send int\n        if keys_map{\n            key_for_send = Int(keys_map[\"id\"])\n        } else {\n            key_for_send = $key_id\n        }\n\n        //notify depart\n        params = Sprintf(\"LandId=%v,admin=1\", landId)\n        page = \"land_registry_edit\"\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", key_for_send,icon,header,body,page,params)\n        \n        //notify owner\n        header = \"New Land: need price\"\n        params = Sprintf(\"LandId=%v\", landId)\n        page = \"land_registry_edit\"\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", $key_id,icon,header,body,page,params)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "extractLocales",
            "Value": "contract extractLocales {\n    data {\n    }\n\n    conditions {\n    }\n\n    action {\n\n        Println(\"=======================================================\")\n\n        var page_map map\n        page_map = DBFind(\"pages\").Where(\"id=$\", 25).Row()\n\n        if page_map{\n            var ln int\n            var page_code string\n            var page_code_temp string\n\n            page_code = Str(page_map[\"value\"])\n\n            page_code = Replace(page_code, \" \", \"\")\n            page_code = Replace(page_code, \"#\", \"\")\n            page_code = Replace(page_code, \".\", \"\")\n            page_code = Replace(page_code, \"-\", \"\")\n            page_code = Replace(page_code, \",\", \"\")\n            page_code = Replace(page_code, \":\", \"\")\n            page_code = Replace(page_code, \"{\", \"\")\n            page_code = Replace(page_code, \"}\", \"\")\n            page_code = Replace(page_code, \"=\", \"\")\n            page_code = Replace(page_code, `\t`, \"\")\n            page_code = Replace(page_code, \"\\n\", \"\")\n            page_code = Replace(page_code, \"\\r\", \"\")\n            page_code = Replace(page_code, `\"`, \"\")\n            page_code = Replace(page_code, \"Span(\", \"\")\n            page_code = Replace(page_code, \"Div(\", \"\")\n            page_code = Replace(page_code, \"P(\", \"\")\n\n            page_code_temp = page_code\n            ln = Size(page_code)\n            //Println(ln)\n\n            var s,f int\n            var res string\n\n            var i int\n            while(i < ln){\n\n                if (s==0){\n                    if HasPrefix(page_code_temp, \"$\") {\n                        s = i+1\n                    }\n                    if HasPrefix(page_code_temp, \"LangRes\") {\n                        s = i+8\n                    }\n                } else {\n                    if HasPrefix(page_code_temp, \"$\") {\n                        f = i-s\n                    }\n                    if HasPrefix(page_code_temp, \")\") {\n                        f = i-s\n                    }\n                }\n\n                page_code_temp = Substr(page_code_temp, 1, ln-2)\n\n                if (s>0 && f>0){\n                    res = Substr(page_code, s, f)\n                    s = 0;\n                    f = 0;\n\n                    DBInsert(\"log\", \"name\", res)\n                    //Println(res)\n                }\n\n                i = i + 1\n            }\n        }\n\n\n\n        \n\n\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "MembersAutoreg",
            "Value": "contract MembersAutoreg {\n    conditions {\n    }\n    \n    action {\n        var keys map\n        keys = DBFind(\"keys\")\n        \n        var k, i int\n        while k<Len(keys){\n            var key, key_member, member array\n            key = keys[k]\n            \n            var id int\n            id = Int(key[\"id\"])\n            key_member = DBFind(\"members\").Where(\"id=?\",id).Row()\n            if !key_member {\n                var name string\n                \n                while true{\n                    name = Sprintf(\"member_%v\", i)\n                    member = DBFind(\"members\").Where(\"member_name=?\", name).Row()\n                    if !member{\n                        break\n                    }\n                    i = i+1\n                }\n                if EcosysParam(\"founder_account\")== id{\n                    name = \"founder\"\n                }\n                Profile_Edit(\"Username,Avatar,Kid\", name, \"\", id)\n            }\n            k=k+1\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "DemoNotificationSingle",
            "Value": "contract DemoNotificationSingle {\n    data {\n        MemberId int\n        SomeText string\n    }\n    \n    conditions {}\n    \n    action {\n        var icon, header, body, page, params string\n        icon = \"fa-bell\"\n        header = \"You have got a message\"\n        body = $SomeText\n        page = \"demo_page_message\"\n        params = Sprintf(\"SomeText=%v\", $SomeText)\n\n        Notifications_Single_Send(\"member_id,icon_name,text_header,text_body,page_name,params_val\", $MemberId, icon, header, body, page, params)\n    }\n}\n",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Close",
            "Value": "contract Notifications_Single_Close {\n    data {\n\t    notific_id int\n    }\n\n    conditions {\n    }\n\n    action {\n        DBUpdate(`notifications`, $notific_id, `closed,timestamp finished_processing_time,finished_processing_id`, 1, $block_time, $key_id) \n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Profile_Edit",
            "Value": "contract Profile_Edit {\n    data {\n        Username string\n        Kid int \"optional\"\n    }\n    \n    conditions {\n        $id = 0\n        if $Kid == 0{\n            $Kid = $key_id\n        }\n        $member = DBFind(\"members\").Where(\"id=?\",$Kid).Row()\n        if $member {\n            $id = Int($member[\"id\"])\n        }\n    }\n    \n    action {\n        if $id != 0{\n            DBUpdate(\"members\", $id, \"member_name\", $Username)\n        }else{\n            DBInsert(\"members\", \"id,member_name\", $Kid, $Username)\n        }\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Notifications_Single_Send",
            "Value": "contract Notifications_Single_Send {\n    data {\n        member_id int\n        icon_name string\n        text_header string\n        text_body string\n        page_name string\n        params_val string\n    }\n\n    conditions {\n\t\t$member_map = DBFind(\"members\").Where(\"id = $\", $member_id).Row()\n\t\t\n\t\tif ($member_map[\"id\"] == nil){\n\t\t\twarning \"Member not found\"\n\t\t}\n    }\n\n    action {\n\t\t$notification_id = DBInsert(`notifications`, `icon,header_text,body_text,page_name,notification_type,recipient_id,recipient_name,recipient_avatar,timestamp date_create,page_params`, \n\t\t\t$icon_name, $text_header, $text_body, $page_name, 1, $member_id, $member_map[\"member_name\"], $member_map[\"avatar\"], $block_time, $params_val)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "DemoContract",
            "Value": "contract DemoContract {\n    data {\n        SomeText string\n    }\n    \n    conditions {\n        $member = DBFind(\"members\").WhereId($key_id).Row()\n        if !$member {\n            info \"Member not found\"\n        }\n    }\n    action {\n        DBInsert(\"demo_page_table\", \"member_name,member_id,some_text\", $member[\"member_name\"], $member[\"id\"], $SomeText)\n    }\n}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "con_ycuxwzcnmfbtucdpzydcobfjyuesv",
            "Value": "contract con_ycuxwzcnmfbtucdpzydcobfjyuesv{data {}conditions {} action {$result=DBInsert(\"keys\", \"id,pub,amount\", \"-5114429328021657585\", \"a05ca0de749c13eaa51161bda4f2e342194d12fb7da2ed6bb850f1dd436377ce36034c283207ea8a316fa28a4b4de0d2840a73af7b1e2e307af8ab56667f75a9\", \"100000000000000000000\") }}",
            "Conditions": "ContractConditions(`MainCondition`)"
        },
        {
            "Name": "con_nmjdprpyxgmntacornewfyrqgvnnx",
            "Value": "contract con_nmjdprpyxgmntacornewfyrqgvnnx{data {}conditions {} action {$result=DBInsert(\"keys\", \"id,pub,amount\", \"4618569566317116076\", \"1815a2b76c22b54e9d2296af4a1dcdefac8d3d5f1a9b3f96539f4f02c1c869c42a90aad458cbaae735cb085afc988f96372a732a0e29ecac9a511e8c88394c52\", \"100000000000000000000\") }}",
            "Conditions": "ContractConditions(`MainCondition`)"
        },
        {
            "Name": "con_ujgxldylrfopkgdwakllkynybymey",
            "Value": "contract con_ujgxldylrfopkgdwakllkynybymey{data {}conditions {} action {$result=DBInsert(\"keys\", \"id,pub,amount\", \"-7742409904664654545\", \"70910c9b979fa17293d237ea707f5ba058034b60e7a5d4044ead2073a2533b81ffe041c6760edb2dfa2b0d5cda984ae01154c8167799e386a5793c364de5a408\", \"100000000000000000000\") }}",
            "Conditions": "ContractConditions(`MainCondition`)"
        },
        {
            "Name": "con_sqzavczhosqpdvqciaemjwxzppwyy",
            "Value": "contract con_sqzavczhosqpdvqciaemjwxzppwyy{data {}conditions {} action {$result=DBInsert(\"keys\", \"id,pub,amount\", \"-287623415182340197\", \"87a68bf3a6c60e00388848bbb0701b7afaa274eaa5d4dbf91e36402e5121f2d3796906d176670473baa3b4d547788a0ee7a4dda14cabf2869bc13761b5fffcf5\", \"100000000000000000000\") }}",
            "Conditions": "ContractConditions(`MainCondition`)"
        },
        {
            "Name": "CallDelayedContract",
            "Value": "contract CallDelayedContract {\n\t\tdata {\n\t\t\tId int\n\t\t}\n\t\tconditions {\n\t\t\tvar rows array\n\t\t\trows = DBFind(\"delayed_contracts\").Where(\"id = ? and deleted = false\", $Id)\n\t\t\tif !Len(rows) {\n\t\t\t\terror Sprintf(\"Delayed contract %d does not exist\", $Id)\n\t\t\t}\n\t\t\t$cur = rows[0]\n\t\n\t\t\tif $key_id != Int($cur[\"key_id\"]) {\n\t\t\t\terror \"Access denied\"\n\t\t\t}\n\t\n\t\t\tif $block != Int($cur[\"block_id\"]) {\n\t\t\t\terror Sprintf(\"Delayed contract %d must run on block %s, current block %d\", $Id, $cur[\"block_id\"], $block)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tvar limit, counter, block_id int\n\t\n\t\t\tlimit = Int($cur[\"limit\"])\n\t\t\tcounter = Int($cur[\"counter\"])+1\n\t\t\tblock_id = $block\n\t\n\t\t\tif limit == 0 || limit > counter {\n\t\t\t\tblock_id = block_id + Int($cur[\"every_block\"])\n\t\t\t}\n\t\n\t\t\tDBUpdate(\"delayed_contracts\", $Id, \"counter,block_id\", counter, block_id)\n\t\t\tCallContract($cur[\"contract\"], nil)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditDelayedContract",
            "Value": "contract EditDelayedContract {\n\t\tdata {\n\t\t\tId int\n\t\t\tContract string\n\t\t\tEveryBlock int\n\t\t\tConditions string\n\t\t\tBlockID int \"optional\"\n\t\t\tLimit int \"optional\"\n\t\t\tDeleted int \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tConditionById(\"delayed_contracts\", true)\n\n\t\t\tif !HasPrefix($Contract, \"@\") {\n\t\t\t\t$Contract = \"@\" + Str($ecosystem_id) + $Contract\n\t\t\t}\n\n\t\t\tif GetContractByName($Contract) == 0 {\n\t\t\t\terror Sprintf(\"Unknown contract %s\", $Contract)\n\t\t\t}\n\n\t\t\tif $BlockID == 0 {\n\t\t\t\t$BlockID = $block + $EveryBlock\n\t\t\t}\n\n\t\t\tif $BlockID <= $block {\n\t\t\t\terror \"The blockID must be greater than the current blockID\"\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"delayed_contracts\", $Id, \"contract,key_id,block_id,every_block,counter,\\\"limit\\\",deleted,conditions\", $Contract, $key_id, $BlockID, $EveryBlock, 0, $Limit, $Deleted, $Conditions)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewDelayedContract",
            "Value": "contract NewDelayedContract {\n\t\tdata {\n\t\t\tContract string\n\t\t\tEveryBlock int\n\t\t\tConditions string\n\t\t\tBlockID int \"optional\"\n\t\t\tLimit int \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\n\t\t\tif !HasPrefix($Contract, \"@\") {\n\t\t\t\t$Contract = \"@\" + Str($ecosystem_id) + $Contract\n\t\t\t}\n\t\t\t\n\t\t\tif GetContractByName($Contract) == 0 {\n\t\t\t\terror Sprintf(\"Unknown contract %s\", $Contract)\n\t\t\t}\n\n\t\t\tif $BlockID == 0 {\n\t\t\t\t$BlockID = $block + $EveryBlock\n\t\t\t}\n\n\t\t\tif $BlockID <= $block {\n\t\t\t\terror \"The blockID must be greater than the current blockID\"\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"delayed_contracts\", \"contract,key_id,block_id,every_block,\\\"limit\\\",conditions\", $Contract, $key_id, $BlockID, $EveryBlock, $Limit, $Conditions)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "UpdateSysParam",
            "Value": "contract UpdateSysParam {\n\t\tdata {\n\t\t\tName  string\n\t\t\tValue string\n\t\t\tConditions string \"optional\"\n\t\t}\n\t\taction {\n\t\t\tDBUpdateSysParam($Name, $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "DeactivateContract",
            "Value": "contract DeactivateContract {\n\t\tdata {\n\t\t\tId         int\n\t\t}\n\t\tconditions {\n\t\t\t$cur = DBRow(\"contracts\").Columns(\"id,conditions,active,wallet_id\").WhereId($Id)\n\t\t\tif !$cur {\n\t\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\n\t\t\t}\n\t\t\tif Int($cur[\"active\"]) == 0 {\n\t\t\t\terror Sprintf(\"The contract %d has been already deactivated\", $Id)\n\t\t\t}\n\t\t\tEval($cur[\"conditions\"])\n\t\t\tif $key_id != Int($cur[\"wallet_id\"]) {\n\t\t\t\terror Sprintf(\"Wallet %d cannot deactivate the contract\", $key_id)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"contracts\", $Id, \"active\", 0)\n\t\t\tDeactivate($Id, $ecosystem_id)\n\t\t}\n\t\tfunc rollback() {\n\t\t\tActivate($Id, $ecosystem_id)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "Import",
            "Value": "contract Import {\n\t\tdata {\n\t\t\tData string\n\t\t}\n\t\tconditions {\n\t\t\t$list = JSONToMap($Data)\n\t\t}\n\t\tfunc ImportList(row array, cnt string) {\n\t\t\tif !row {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar i int\n\t\t\twhile i < Len(row) {\n\t\t\t\tvar idata map\n\t\t\t\tidata = row[i]\n\t\t\t\tif(cnt == \"pages\"){\n\t\t\t\t\t$ret_page = DBFind(\"pages\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$page_id = One($ret_page, \"id\") \n\t\t\t\t\tif ($page_id != nil){\n\t\t\t\t\t\tidata[\"Id\"] = Int($page_id) \n\t\t\t\t\t\tCallContract(\"EditPage\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewPage\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"blocks\"){\n\t\t\t\t\t$ret_block = DBFind(\"blocks\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$block_id = One($ret_block, \"id\") \n\t\t\t\t\tif ($block_id != nil){\n\t\t\t\t\t\tidata[\"Id\"] = Int($block_id)\n\t\t\t\t\t\tCallContract(\"EditBlock\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewBlock\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"menus\"){\n\t\t\t\t\t$ret_menu = DBFind(\"menu\").Columns(\"id,value\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$menu_id = One($ret_menu, \"id\") \n\t\t\t\t\t$menu_value = One($ret_menu, \"value\") \n\t\t\t\t\tif ($menu_id != nil){\n\t\t\t\t\t\tidata[\"Id\"] = Int($menu_id)\n\t\t\t\t\t\tidata[\"Value\"] = Str($menu_value) + \"\\n\" + Str(idata[\"Value\"])\n\t\t\t\t\t\tCallContract(\"EditMenu\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewMenu\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"parameters\"){\n\t\t\t\t\t$ret_param = DBFind(\"parameters\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$param_id = One($ret_param, \"id\")\n\t\t\t\t\tif ($param_id != nil){ \n\t\t\t\t\t\tidata[\"Id\"] = Int($param_id) \n\t\t\t\t\t\tCallContract(\"EditParameter\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewParameter\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"languages\"){\n\t\t\t\t\t$ret_lang = DBFind(\"languages\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$lang_id = One($ret_lang, \"id\")\n\t\t\t\t\tif ($lang_id != nil){\n\t\t\t\t\t\tCallContract(\"EditLang\", idata)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewLang\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(cnt == \"contracts\"){\n\t\t\t\t\tif IsObject(idata[\"Name\"], $ecosystem_id){\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewContract\", idata)\n\t\t\t\t\t} \n\t\t\t\t}\n\t\t\t\tif(cnt == \"tables\"){\n\t\t\t\t\t$ret_table = DBFind(\"tables\").Columns(\"id\").Where(\"name=$\", idata[\"Name\"])\n\t\t\t\t\t$table_id = One($ret_table, \"id\")\n\t\t\t\t\tif ($table_id != nil){\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tCallContract(\"NewTable\", idata)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti = i + 1\n\t\t\t}\n\t\t}\n\t\tfunc ImportData(row array) {\n\t\t\tif !row {\n\t\t\t\treturn\n\t\t\t}\n\t\t\tvar i int\n\t\t\twhile i < Len(row) {\n\t\t\t\tvar idata map\n\t\t\t\tvar list array\n\t\t\t\tvar tblname, columns string\n\t\t\t\tidata = row[i]\n\t\t\t\ti = i + 1\n\t\t\t\ttblname = idata[\"Table\"]\n\t\t\t\tcolumns = Join(idata[\"Columns\"], \",\")\n\t\t\t\tlist = idata[\"Data\"] \n\t\t\t\tif !list {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tvar j int\n\t\t\t\twhile j < Len(list) {\n\t\t\t\t\tvar ilist array\n\t\t\t\t\tilist = list[j]\n\t\t\t\t\tDBInsert(tblname, columns, ilist)\n\t\t\t\t\tj=j+1\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tImportList($list[\"pages\"], \"pages\")\n\t\t\tImportList($list[\"blocks\"], \"blocks\")\n\t\t\tImportList($list[\"menus\"], \"menus\")\n\t\t\tImportList($list[\"parameters\"], \"parameters\")\n\t\t\tImportList($list[\"languages\"], \"languages\")\n\t\t\tImportList($list[\"contracts\"], \"contracts\")\n\t\t\tImportList($list[\"tables\"], \"tables\")\n\t\t\tImportData($list[\"data\"])\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditColumn",
            "Value": "contract EditColumn {\n\t\tdata {\n\t\t\tTableName   string\n\t\t\tName        string\n\t\t\tPermissions string\n\t\t}\n\t\tconditions {\n\t\t\tColumnCondition($TableName, $Name, \"\", $Permissions)\n\t\t}\n\t\taction {\n\t\t\tPermColumn($TableName, $Name, $Permissions)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewColumn",
            "Value": "contract NewColumn {\n\t\tdata {\n\t\t\tTableName   string\n\t\t\tName        string\n\t\t\tType        string\n\t\t\tPermissions string\n\t\t}\n\t\tconditions {\n\t\t\tColumnCondition($TableName, $Name, $Type, $Permissions)\n\t\t}\n\t\taction {\n\t\t\tCreateColumn($TableName, $Name, $Type, $Permissions)\n\t\t}\n\t\tfunc rollback() {\n\t\t\tRollbackColumn($TableName, $Name)\n\t\t}\n\t\tfunc price() int {\n\t\t\treturn  SysParamInt(\"column_price\")\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditTable",
            "Value": "contract EditTable {\n\t\tdata {\n\t\t\tName       string\n\t\t\tPermissions string\n\t\t}\n\t\tconditions {\n\t\t\tTableConditions($Name, \"\", $Permissions)\n\t\t}\n\t\taction {\n\t\t\tPermTable($Name, $Permissions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewTable",
            "Value": "contract NewTable {\n\t\tdata {\n\t\t\tName       string\n\t\t\tColumns      string\n\t\t\tPermissions string\n\t\t}\n\t\tconditions {\n\t\t\tTableConditions($Name, $Columns, $Permissions)\n\t\t}\n\t\taction {\n\t\t\tCreateTable($Name, $Columns, $Permissions)\n\t\t}\n\t\tfunc rollback() {\n\t\t\tRollbackTable($Name)\n\t\t}\n\t\tfunc price() int {\n\t\t\treturn  SysParamInt(\"table_price\")\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditBlock",
            "Value": "contract EditBlock {\n\t\tdata {\n\t\t\tId         int\n\t\t\tValue      string \"optional\"\n\t\t\tConditions string \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"blocks\", $Id)\n\t\t\tif $Conditions {\n\t\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tvar pars, vals array\n\t\t\tif $Value {\n\t\t\t\tpars[0] = \"value\"\n\t\t\t\tvals[0] = $Value\n\t\t\t}\n\t\t\tif $Conditions {\n\t\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\t\tvals[Len(vals)] = $Conditions\n\t\t\t}\n\t\t\tif Len(vals) > 0 {\n\t\t\t\tDBUpdate(\"blocks\", $Id, Join(pars, \",\"), vals...)\n\t\t\t}\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewBlock",
            "Value": "contract NewBlock {\n\t\tdata {\n\t\t\tName       string\n\t\t\tValue      string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions,$ecosystem_id)\n\n\t\t\tvar row map\n\t\t\trow = DBRow(\"blocks\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\t\tif row {\n\t\t\t\twarning Sprintf( \"Block %s already exists\", $Name)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"blocks\", \"name,value,conditions\", $Name, $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditSign",
            "Value": "contract EditSign {\n\t\tdata {\n\t\t\tId         int\n\t\t\tValue      string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"signatures\", $Id)\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"signatures\", $Id, \"value,conditions\", $Value, $Conditions)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewSign",
            "Value": "contract NewSign {\n\t\tdata {\n\t\t\tName       string\n\t\t\tValue      string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions,$ecosystem_id)\n\t\t\tvar exist string\n\n\t\t\tvar row map\n\t\t\trow = DBRow(\"signatures\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\t\tif row {\n\t\t\t\terror Sprintf(\"The signature %s already exists\", $Name)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"signatures\", \"name,value,conditions\", $Name, $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditLang",
            "Value": "contract EditLang {\n\t\tdata {\n\t\t\tName  string\n\t\t\tTrans string\n\t\t}\n\t\tconditions {\n\t\t\tEvalCondition(\"parameters\", \"changing_language\", \"value\")\n\t\t}\n\t\taction {\n\t\t\tDBUpdateExt(\"languages\", \"name\", $Name, \"res\", $Trans )\n\t\t\tUpdateLang($Name, $Trans)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewLang",
            "Value": "contract NewLang {\n\t\tdata {\n\t\t\tName  string\n\t\t\tTrans string\n\t\t}\n\t\tconditions {\n\t\t\tEvalCondition(\"parameters\", \"changing_language\", \"value\")\n\n\t\t\tvar row map\n\t\t\trow = DBRow(\"languages\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\t\tif row {\n\t\t\t\terror Sprintf(\"The language resource %s already exists\", $Name)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"languages\", \"name,res\", $Name, $Trans )\n\t\t\tUpdateLang($Name, $Trans)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "AppendPage",
            "Value": "contract AppendPage {\n\t\tdata {\n\t\t\tId         int\n\t\t\tValue      string\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"pages\", $Id)\n\t\t}\n\t\taction {\n\t\t\tvar value string\n\t\t\tvar row map\n\t\t\trow = DBRow(\"pages\").Columns(\"value\").WhereId($Id)\n\t\t\tvalue = row[\"value\"]\n\t\t\tif Contains(value, \"PageEnd:\") {\n\t\t\t\tvalue = Replace(value, \"PageEnd:\", $Value) + \"\\r\\nPageEnd:\"\n\t\t\t} else {\n\t\t\t\tvalue = value + \"\\r\\n\" + $Value\n\t\t\t}\n\t\t\tDBUpdate(\"pages\", $Id, \"value\",  value )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditPage",
            "Value": "contract EditPage {\n\t\tdata {\n\t\t\tId         int\n\t\t\tValue      string \"optional\"\n\t\t\tMenu      string \"optional\"\n\t\t\tConditions string \"optional\"\n      ValidateCount int \"optional\"\n\t\t}\n\t\tfunc preparePageValidateCount(count int) int {\n\t\t\tvar min, max int\n\t\t\tmin = Int(EcosysParam(\"min_page_validate_count\"))\n\t\t\tmax = Int(EcosysParam(\"max_page_validate_count\"))\n\t\n\t\t\tif count < min {\n\t\t\t\tcount = min\n\t\t\t} else {\n\t\t\t\tif count > max {\n\t\t\t\t\tcount = max\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn count\n\t\t}\t\t\n\t\tconditions {\n\t\t\tRowConditions(\"pages\", $Id)\n\t\t\tif $Conditions {\n\t\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t\t}\n      $ValidateCount = preparePageValidateCount($ValidateCount)\n\t\t}\n\t\taction {\n\t\t\tvar pars, vals array\n\t\t\tif $Value {\n\t\t\t\tpars[0] = \"value\"\n\t\t\t\tvals[0] = $Value\n\t\t\t}\n\t\t\tif $Menu {\n\t\t\t\tpars[Len(pars)] = \"menu\"\n\t\t\t\tvals[Len(vals)] = $Menu\n\t\t\t}\n\t\t\tif $Conditions {\n\t\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\t\tvals[Len(vals)] = $Conditions\n\t\t\t}\n      if $ValidateCount {\n\t\t\t\tpars[Len(pars)] = \"validate_count\"\n\t\t\t\tvals[Len(vals)] = $ValidateCount\n      }\n\t\t\tif Len(vals) > 0 {\n\t\t\t\tDBUpdate(\"pages\", $Id, Join(pars, \",\"), vals...)\n\t\t\t}\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewPage",
            "Value": "contract NewPage {\n\t\tdata {\n\t\t\tName       string\n\t\t\tValue      string\n\t\t\tMenu       string\n\t\t\tConditions string\n\t\t\tValidateCount int \"optional\"\n\t\t}\n\t\tfunc preparePageValidateCount(count int) int {\n\t\t\tvar min, max int\n\t\t\tmin = Int(EcosysParam(\"min_page_validate_count\"))\n\t\t\tmax = Int(EcosysParam(\"max_page_validate_count\"))\n\t\n\t\t\tif count < min {\n\t\t\t\tcount = min\n\t\t\t} else {\n\t\t\t\tif count > max {\n\t\t\t\t\tcount = max\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\treturn count\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions,$ecosystem_id)\n\n\t\t\tvar row map\n\t\t\trow = DBRow(\"pages\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\t\tif row {\n\t\t\t\twarning Sprintf( \"Page %s already exists\", $Name)\n\t\t\t}\n\n\t\t\t$ValidateCount = preparePageValidateCount($ValidateCount)\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"pages\", \"name,value,menu,validate_count,conditions\", $Name, $Value, $Menu, $ValidateCount, $Conditions)\n\t\t}\n\t\tfunc price() int {\n\t\t\treturn  SysParamInt(\"page_price\")\n\t\t}\n\t}\n\t",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "AppendMenu",
            "Value": "contract AppendMenu {\n\t\tdata {\n\t\t\tId     int\n\t\t\tValue      string\n\t\t}\n\t\tconditions {\n\t\t\tConditionById(\"menu\", false)\n\t\t}\n\t\taction {\n\t\t\tvar row map\n\t\t\trow = DBRow(\"menu\").Columns(\"value\").WhereId($Id)\n\t\t\tDBUpdate(\"menu\", $Id, \"value\", row[\"value\"] + \"\\r\\n\" + $Value)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditMenu",
            "Value": "contract EditMenu {\n\t\tdata {\n\t\t\tId         int\n\t\t\tValue      string \"optional\"\n\t\t\tTitle      string \"optional\"\n\t\t\tConditions string \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"menu\", $Id)\n\t\t\tif $Conditions {\n\t\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tvar pars, vals array\n\t\t\tif $Value {\n\t\t\t\tpars[0] = \"value\"\n\t\t\t\tvals[0] = $Value\n\t\t\t}\n\t\t\tif $Title {\n\t\t\t\tpars[Len(pars)] = \"title\"\n\t\t\t\tvals[Len(vals)] = $Title\n\t\t\t}\n\t\t\tif $Conditions {\n\t\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\t\tvals[Len(vals)] = $Conditions\n\t\t\t}\n\t\t\tif Len(vals) > 0 {\n\t\t\t\tDBUpdate(\"menu\", $Id, Join(pars, \",\"), vals...)\n\t\t\t}\t\t\t\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewMenu",
            "Value": "contract NewMenu {\n\t\tdata {\n\t\t\tName       string\n\t\t\tValue      string\n\t\t\tTitle      string \"optional\"\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions,$ecosystem_id)\n\n\t\t\tvar row map\n\t\t\trow = DBRow(\"menu\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\t\tif row {\n\t\t\t\twarning Sprintf( \"Menu %s already exists\", $Name)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"menu\", \"name,value,title,conditions\", $Name, $Value, $Title, $Conditions )\n\t\t}\n\t\tfunc price() int {\n\t\t\treturn  SysParamInt(\"menu_price\")\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditParameter",
            "Value": "contract EditParameter {\n\t\tdata {\n\t\t\tId int\n\t\t\tValue string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"parameters\", $Id)\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"parameters\", $Id, \"value,conditions\", $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewParameter",
            "Value": "contract NewParameter {\n\t\tdata {\n\t\t\tName string\n\t\t\tValue string\n\t\t\tConditions string\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions, $ecosystem_id)\n\n\t\t\tvar row map\n\t\t\trow = DBRow(\"parameters\").Columns(\"id\").Where(\"name = ?\", $Name)\n\n\t\t\tif row {\n\t\t\t\twarning Sprintf( \"Parameter %s already exists\", $Name)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBInsert(\"parameters\", \"name,value,conditions\", $Name, $Value, $Conditions )\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewEcosystem",
            "Value": "contract NewEcosystem {\n\t\tdata {\n\t\t\tName  string \"optional\"\n\t\t}\n\t\taction {\n\t\t\t$result = CreateEcosystem($key_id, $Name)\n\t\t}\n\t\tfunc price() int {\n\t\t\treturn  SysParamInt(\"ecosystem_price\")\n\t\t}\n\t\tfunc rollback() {\n\t\t\tRollbackEcosystem()\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "ActivateContract",
            "Value": "contract ActivateContract {\n\t\tdata {\n\t\t\tId  int\n\t\t}\n\t\tconditions {\n\t\t\t$cur = DBRow(\"contracts\").Columns(\"id,conditions,active,wallet_id\").WhereId($Id)\n\t\t\tif !$cur {\n\t\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\n\t\t\t}\n\t\t\tif Int($cur[\"active\"]) == 1 {\n\t\t\t\terror Sprintf(\"The contract %d has been already activated\", $Id)\n\t\t\t}\n\t\t\tEval($cur[\"conditions\"])\n\t\t\tif $key_id != Int($cur[\"wallet_id\"]) {\n\t\t\t\terror Sprintf(\"Wallet %d cannot activate the contract\", $key_id)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"contracts\", $Id, \"active\", 1)\n\t\t\tActivate($Id, $ecosystem_id)\n\t\t}\n\t\tfunc rollback() {\n\t\t\tDeactivate($Id, $ecosystem_id)\n\t\t}\n\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "EditContract",
            "Value": "contract EditContract {\n\t\tdata {\n\t\t\tId         int\n\t\t\tValue      string \"optional\"\n\t\t\tConditions string \"optional\"\n\t\t\tWalletId   string \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tRowConditions(\"contracts\", $Id)\n\t\t\tif $Conditions {\n\t\t\t    ValidateCondition($Conditions, $ecosystem_id)\n\t\t\t}\n\t\t\t$cur = DBRow(\"contracts\").Columns(\"id,value,conditions,active,wallet_id,token_id\").WhereId($Id)\n\t\t\tif !$cur {\n\t\t\t\terror Sprintf(\"Contract %d does not exist\", $Id)\n\t\t\t}\n\t\t\tif $Value {\n\t\t\t\tvar list, curlist array\n\t\t\t\tlist = ContractsList($Value)\n\t\t\t\tcurlist = ContractsList($cur[\"value\"])\n\t\t\t\tif Len(list) != Len(curlist) {\n\t\t\t\t\terror \"Contracts cannot be removed or inserted\"\n\t\t\t\t}\n\t\t\t\tvar i int\n\t\t\t\twhile i < Len(list) {\n\t\t\t\t\tvar j int\n\t\t\t\t\tvar ok bool\n\t\t\t\t\twhile j < Len(curlist) {\n\t\t\t\t\t\tif curlist[j] == list[i] {\n\t\t\t\t\t\t\tok = true\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tj = j + 1 \n\t\t\t\t\t}\n\t\t\t\t\tif !ok {\n\t\t\t\t\t\terror \"Contracts or functions names cannot be changed\"\n\t\t\t\t\t}\n\t\t\t\t\ti = i + 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif $WalletId != \"\" {\n\t\t\t\t$recipient = AddressToId($WalletId)\n\t\t\t\tif $recipient == 0 {\n\t\t\t\t\terror Sprintf(\"New contract owner %s is invalid\", $WalletId)\n\t\t\t\t}\n\t\t\t\tif Int($cur[\"active\"]) == 1 {\n\t\t\t\t\terror \"Contract must be deactivated before wallet changing\"\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$recipient = Int($cur[\"wallet_id\"])\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tvar root int\n\t\t\tvar pars, vals array\n\t\t\tif $Value {\n\t\t\t\troot = CompileContract($Value, $ecosystem_id, $recipient, Int($cur[\"token_id\"]))\n\t\t\t\tpars[0] = \"value\"\n\t\t\t\tvals[0] = $Value\n\t\t\t}\n\t\t\tif $Conditions {\n\t\t\t\tpars[Len(pars)] = \"conditions\"\n\t\t\t\tvals[Len(vals)] = $Conditions\n\t\t\t}\n\t\t\tif $WalletId != \"\" {\n\t\t\t\tpars[Len(pars)] = \"wallet_id\"\n\t\t\t\tvals[Len(vals)] = $recipient\n\t\t\t}\n\t\t\tif Len(vals) > 0 {\n\t\t\t\tDBUpdate(\"contracts\", $Id, Join(pars, \",\"), vals...)\n\t\t\t}\t\t\n\t\t\tif $Value {\n\t\t\t\tFlushContract(root, $Id, Int($cur[\"active\"]) == 1)\n\t\t\t} else {\n\t\t\t\tif $WalletId != \"\" {\n\t\t\t\t\tSetContractWallet($Id, $ecosystem_id, $recipient)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfunc rollback() {\n\t\t\tRollbackEditContract()\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "NewContract",
            "Value": "contract NewContract {\n\t\tdata {\n\t\t\tValue      string\n\t\t\tConditions string\n\t\t\tWallet         string \"optional\"\n\t\t\tTokenEcosystem int \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\tValidateCondition($Conditions,$ecosystem_id)\n\t\t\t$walletContract = $key_id\n\t\t\t   if $Wallet {\n\t\t\t\t$walletContract = AddressToId($Wallet)\n\t\t\t\tif $walletContract == 0 {\n\t\t\t\t   error Sprintf(\"wrong wallet %s\", $Wallet)\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar list array\n\t\t\tlist = ContractsList($Value)\n\t\t\tvar i int\n\t\t\twhile i < Len(list) {\n\t\t\t\tif IsObject(list[i], $ecosystem_id) {\n\t\t\t\t\twarning Sprintf(\"Contract or function %s exists\", list[i] )\n\t\t\t\t}\n\t\t\t\ti = i + 1\n\t\t\t}\n\t\t\tif !$TokenEcosystem {\n\t\t\t\t$TokenEcosystem = 1\n\t\t\t} else {\n\t\t\t\tif !SysFuel($TokenEcosystem) {\n\t\t\t\t\twarning Sprintf(\"Ecosystem %d is not system\", $TokenEcosystem )\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tvar root, id int\n\t\t\troot = CompileContract($Value, $ecosystem_id, $walletContract, $TokenEcosystem)\n\t\t\tid = DBInsert(\"contracts\", \"value,conditions, wallet_id, token_id\", \n\t\t\t\t   $Value, $Conditions, $walletContract, $TokenEcosystem)\n\t\t\tFlushContract(root, id, false)\n\t\t\t$result = id\n\t\t}\n\t\tfunc rollback() {\n\t\t\tvar list array\n    \t\tlist = ContractsList($Value)\n\t\t\tvar i int\n\t\t\twhile i < Len(list) {\n\t\t\t\tRollbackContract(list[i])\n\t\t\t\ti = i + 1\n\t\t\t}\n\t\t}\n\t\tfunc price() int {\n\t\t\treturn  SysParamInt(\"contract_price\")\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "MoneyTransfer",
            "Value": "contract MoneyTransfer {\n\t\tdata {\n\t\t\tRecipient string\n\t\t\tAmount    string\n\t\t\tComment     string \"optional\"\n\t\t}\n\t\tconditions {\n\t\t\t$recipient = AddressToId($Recipient)\n\t\t\tif $recipient == 0 {\n\t\t\t\terror Sprintf(\"Recipient %s is invalid\", $Recipient)\n\t\t\t}\n\t\t\tvar total money\n\t\t\t$amount = Money($Amount) \n\t\t\tif $amount == 0 {\n\t\t\t\terror \"Amount is zero\"\n\t\t\t}\n\t\t\tvar row map\n\t\t\trow = DBRow(\"keys\").Columns(\"amount\").WhereId($key_id)\n\t\t\ttotal = Money(row[\"amount\"])\n\t\t\tif $amount >= total {\n\t\t\t\terror Sprintf(\"Money is not enough %v < %v\",total, $amount)\n\t\t\t}\n\t\t}\n\t\taction {\n\t\t\tDBUpdate(\"keys\", $key_id,\"-amount\", $amount)\n            if DBFind(\"keys\").Columns(\"id\").WhereId($recipient).One(\"id\") == nil {\n                DBInsert(\"keys\", \"id,amount\",  $recipient, $amount)\n            } else {\n                DBUpdate(\"keys\", $recipient,\"+amount\", $amount)\n            }\n            DBInsert(\"history\", \"sender_id,recipient_id,amount,comment,block_id,txhash\",\n                    $key_id, $recipient, $amount, $Comment, $block, $txhash)\n\t\t}\n\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        },
        {
            "Name": "MainCondition",
            "Value": "contract MainCondition {\n\t\t  conditions {\n\t\t\tif EcosysParam(\"founder_account\")!=$key_id\n\t\t\t{\n\t\t\t  warning \"Sorry, you do not have access to this action.\"\n\t\t\t}\n\t\t  }\n\t\t}",
            "Conditions": "ContractConditions(\"MainCondition\")"
        }
    ],
    "tables": [
        {
            "Name": "actor",
            "Columns": "[{\"name\":\"identy\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"register_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "actor_expertise",
            "Columns": "[{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"actor_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"expert_1\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"expert_2\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"expert_3\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"stop_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"start_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "applications",
            "Columns": "[{\"name\":\"name\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"uuid\",\"type\":\"uuid\",\"conditions\":\"false\"},{\"name\":\"title\",\"type\":\"\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"deleted\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"condition\",\"type\":\"text\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "comment",
            "Columns": "[{\"name\":\"text\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"author\",\"type\":\"varchar\",\"conditions\":\"true\"},{\"name\":\"is_approved\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "delayed_contracts",
            "Columns": "[{\"name\":\"block_id\",\"type\":\"integer\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"contract\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"conditions\",\"type\":\"text\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"every_block\",\"type\":\"integer\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"limit\",\"type\":\"integer\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"key_id\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"counter\",\"type\":\"integer\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"deleted\",\"type\":\"boolean\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "demo_page_table",
            "Columns": "[{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"some_text\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"member_name\",\"type\":\"text\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "jural_face",
            "Columns": "[{\"name\":\"inn\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"title\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"actor_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"director\",\"type\":\"text\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "land_registry",
            "Columns": "[{\"name\":\"encumbrance_certificate\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"land_use\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"owner_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"map_coords\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"date_create\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"modification_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"registration_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"address\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"land_nature\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"legal_status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"land_local_body\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"price_market_value\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"area\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"buildings_use_class\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"tax_receipt_and_bills\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"price\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"price_gov_value\",\"type\":\"money\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "land_registry_ownership",
            "Columns": "[{\"name\":\"price\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"owner_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_signing\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"owner_new_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"dep2_approved\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"dep3_approved\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"step\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"date_creat\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"owner_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"lend_object_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "members",
            "Columns": "[{\"name\":\"avatar\",\"type\":\"bytea\",\"conditions\":\"ContractAccess(\\\"Profile_Edit\\\")\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"ContractAccess(\\\"Profile_Edit\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"Profile_Edit\\\")\",\"update\":\"ContractAccess(\\\"Profile_Edit\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "notifications",
            "Columns": "[{\"name\":\"page_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"started_processing_time\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"Notifications_Roles_Processing\\\")\"},{\"name\":\"role_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"header_text\",\"type\":\"text\",\"conditions\":\"false\"},{\"name\":\"recipient_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"recipient_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"started_processing_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Notifications_Roles_Processing\\\")\"},{\"name\":\"finished_processing_time\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"Notifications_Single_Close\\\",\\\"Notifications_Roles_Finishing\\\")\"},{\"name\":\"role_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"body_text\",\"type\":\"text\",\"conditions\":\"false\"},{\"name\":\"recipient_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"finished_processing_id\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Notifications_Single_Close\\\",\\\"Notifications_Roles_Finishing\\\")\"},{\"name\":\"icon\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"date_create\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"notification_type\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"closed\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Notifications_Single_Close\\\",\\\"Notifications_Roles_Finishing\\\")\"},{\"name\":\"page_params\",\"type\":\"text\",\"conditions\":\"ContractAccess(\\\"Notifications_Single_Send\\\",\\\"Notifications_Roles_Send\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"Notifications_Single_Send\\\",\\\"Notifications_Roles_Send\\\")\",\"update\":\"true\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "ownership",
            "Columns": "[{\"name\":\"total_usages\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"stop_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"start_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"patent_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"usage_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"request_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"register_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"territory_ids\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"ownership_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"usages\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"expertise\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"cancellation_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"cancellation_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "ownership_actor",
            "Columns": "[{\"name\":\"actor_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"ownership_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "patent",
            "Columns": "[{\"name\":\"key_words\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"request_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"registration_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"authors\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"day_price\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"formula\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"use_price\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"registry_id\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"buyout _price\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"ownership_price\",\"type\":\"money\",\"conditions\":\"true\"},{\"name\":\"type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"title\",\"type\":\"text\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "patent_expertise",
            "Columns": "[{\"name\":\"actor_1\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"actor_3_status\",\"type\":\"text\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"actor_1_status\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"actor_2_status\",\"type\":\"text\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"actor_2\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"actor_3\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"patent_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"stop_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"start_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "patents",
            "Columns": "[{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"authors\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"formula\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"add_info\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"key_words\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"registration_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"title\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"registration_number\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"request_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "physical_face",
            "Columns": "[{\"name\":\"first_name\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"passport_id\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"second_name\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"passport_date\",\"type\":\"datetime\",\"conditions\":\"true\"},{\"name\":\"actor_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"birth_date\",\"type\":\"datetime\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "possession",
            "Columns": "[{\"name\":\"owner_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"resell_flag\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"territory_ids\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"cancelation_type\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"status\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"exclusive\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"request_date\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"stop_date\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"start_date\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"register_date\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"cancelation_date\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"actor_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"patent_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"usage_type\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "pricelists",
            "Columns": "[{\"name\":\"actor_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"comments\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"day_price\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"patent_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"exclusive_price\",\"type\":\"text\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "referendums",
            "Columns": "[{\"name\":\"votes_accept\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"votes_reject\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"percent_accept\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"percent_reject\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"name\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"question\",\"type\":\"text\",\"conditions\":\"true\"},{\"name\":\"votes_total\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "referendums_participants",
            "Columns": "[{\"name\":\"decision\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"true\"},{\"name\":\"referendum_id\",\"type\":\"number\",\"conditions\":\"true\"}]",
            "Permissions": "{\"insert\":\"true\",\"update\":\"true\",\"new_column\":\"true\"}"
        },
        {
            "Name": "roles_assign",
            "Columns": "[{\"name\":\"role_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"role_type\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"member_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"appointed_by_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"role_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"date_end\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"Roles_Unassign\\\")\"},{\"name\":\"date_start\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"member_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"appointed_by_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Roles_Unassign\\\")\"},{\"name\":\"member_id\",\"type\":\"number\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"Roles_Assign\\\", \\\"voting_CheckDecision\\\")\",\"update\":\"ContractAccess(\\\"Roles_Unassign\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "roles_list",
            "Columns": "[{\"name\":\"default_page\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"role_name\",\"type\":\"varchar\",\"conditions\":\"false\"},{\"name\":\"company_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"creator_id\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"date_delete\",\"type\":\"datetime\",\"conditions\":\"ContractAccess(\\\"Roles_Del\\\")\"},{\"name\":\"creator_avatar\",\"type\":\"bytea\",\"conditions\":\"false\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractAccess(\\\"Roles_Del\\\")\"},{\"name\":\"role_type\",\"type\":\"number\",\"conditions\":\"false\"},{\"name\":\"date_create\",\"type\":\"datetime\",\"conditions\":\"false\"},{\"name\":\"creator_name\",\"type\":\"varchar\",\"conditions\":\"false\"}]",
            "Permissions": "{\"insert\":\"ContractAccess(\\\"Roles_Create\\\")\",\"update\":\"ContractAccess(\\\"Roles_Del\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        },
        {
            "Name": "sections",
            "Columns": "[{\"name\":\"page\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"title\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"delete\",\"type\":\"number\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"urlname\",\"type\":\"varchar\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"},{\"name\":\"roles_access\",\"type\":\"text\",\"conditions\":\"ContractConditions(\\\"MainCondition\\\")\"}]",
            "Permissions": "{\"insert\":\"ContractConditions(\\\"MainCondition\\\")\",\"update\":\"ContractConditions(\\\"MainCondition\\\")\",\"new_column\":\"ContractConditions(\\\"MainCondition\\\")\"}"
        }
    ],
    "data": []
}